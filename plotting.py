import numpy as np
import matplotlib.pyplot as plt

# === Magnitude Spectrum from C Output ===
magnitude  = np.array([
    1.0, 0.0, 0.9999242, -0.01231175, 0.9996968, -0.02461903, 0.9993178, -0.03691734,
    0.9987872, -0.04920221, 0.99810505, -0.06146917, 0.99727124, -0.07371373, 0.99628586, -0.08593141,
    0.9951489, -0.09811773, 0.9938603, -0.11026821, 0.99242014, -0.12237839, 0.99082834, -0.13444376,
    0.98908496, -0.14645983, 0.98719, -0.15842217, 0.9851434, -0.17032628, 0.98294526, -0.18216766,
    0.9805955, -0.19394185, 0.97809416, -0.20564437, 0.97544116, -0.21727072, 0.97263664, -0.22881645,
    0.9696805, -0.24027705, 0.9665727, -0.25164807, 0.96331334, -0.262925, 0.9599024, -0.2741034,
    0.9563399, -0.28517872, 0.95262575, -0.29614657, 0.94876, -0.30700243, 0.9447427, -0.3177418,
    0.9405737, -0.32836023, 0.9362532, -0.3388532, 0.93178105, -0.34921628, 0.92715734, -0.35944498,
    0.922382, -0.3695348, 0.9174551, -0.37948126, 0.9123765, -0.3892799, 0.90714645, -0.39892623,
    0.90176475, -0.40841576, 0.8962314, -0.41774404, 0.8905465, -0.42690656, 0.88470995, -0.43589884,
    0.8787219, -0.44471642, 0.8725822, -0.4533548, 0.86629087, -0.46180955, 0.85984796, -0.47007608,
    0.8532535, -0.47815007, 0.8465074, -0.48602688, 0.8396097, -0.49370217, 0.8325604, -0.50117135,
    0.8253595, -0.50842994, 0.818007, -0.5154736, 0.81050295, -0.5222977, 0.80284727, -0.5288978,
    0.79504, -0.53526944, 0.7870811, -0.5414082, 0.77897066, -0.54730946, 0.77070856, -0.55296886,
    0.7622949, -0.55838186, 0.7537296, -0.563544, 0.74501276, -0.5684508, 0.7361443, -0.57309777,
    0.7271242, -0.57748044, 0.71795255, -0.5815943, 0.7086293, -0.5854349, 0.69915444, -0.5889978,
    0.689528, -0.5922785, 0.67974997, -0.5952724, 0.6698203, -0.59797513, 0.6597391, -0.60038227,
    0.6495062, -0.60248923, 0.6391218, -0.6042916, 0.62858576, -0.6057849, 0.6178981, -0.6069645,
    0.6070589, -0.6078262, 0.5960681, -0.60836524, 0.58492565, -0.60857725, 0.57363164, -0.6084578,
    0.562186, -0.6080024, 0.5505887, -0.6072065, 0.53883994, -0.60606575, 0.5269395, -0.6045755,
    0.51488745, -0.60273135, 0.5026839, -0.60052884, 0.49032873, -0.59796345, 0.4778219, -0.5950308,
    0.46516347, -0.59172624, 0.45235354, -0.5880455, 0.4393919, -0.5839839, 0.42627865, -0.57953703,
    0.41301382, -0.57470036, 0.39959753, -0.56946963, 0.38602954, -0.56384015, 0.37230992, -0.5578075,
    0.35843867, -0.55136716, 0.34441602, -0.5445148, 0.33024156, -0.53724563, 0.31591558, -0.5295555,
    0.3014381, -0.52143985, 0.2868089, -0.51289403, 0.2720281, -0.5039137, 0.2570957, -0.49449438,
    0.24201179, -0.48463154, 0.22677618, -0.47432077, 0.211389, -0.46355754, 0.1958502, -0.45233738,
    0.18015999, -0.4406559, 0.16431797, -0.42850828, 0.14832437, -0.41589046, 0.1321792, -0.40279776,
    0.11588258, -0.38922584, 0.09943414, -0.37516993, 0.08283418, -0.36062586, 0.0660826, -0.34558892,
    0.04917955, -0.33005488, 0.03212482, -0.31401896, 0.01491839, -0.2974769, -0.00243938, -0.28042436,
    -0.01994896, -0.26285636, -0.03761017, -0.24476862, -0.0554229, -0.22615695, -0.07338715, -0.2070167,
    -0.09150302, -0.18734336, -0.10977066, -0.16713226, -0.1281898, -0.14637935, -0.14676034, -0.12507999,
    -0.16548276, -0.10322928, -0.18435669, -0.0808233, -0.20338225, -0.05785728, -0.22255921, -0.03432703
])




# === Original Pure Sine Wave ===
t = np.linspace(0, 1, 64, endpoint=False)
pure_sine = np.sin(2 * np.pi * 5 * t)

# === Simulated Noisy Input (example) ===
np.random.seed(0)  # for reproducibility
noise = np.random.normal(0, 0.4, 64)
noisy_signal = pure_sine + noise

# === Denoised Output from C (IFFT output) ===
denoised_signal = np.array([
    -0.144797, 0.365267, 0.789071, 1.026530, 1.021566, 0.775352, 0.346032, -0.165005,
    -0.637075, -0.958695, -1.053912, -0.900240, -0.533969, -0.041598, 0.460597, 0.854019,
    1.045758, 0.990533, 0.701386, 0.246602, -0.266419, -0.716523, -0.997415, -1.042760,
    -0.841849, -0.442130, 0.062002, 0.551492, 0.910743, 1.054915, 0.949961, 0.620667,
     0.144797, -0.365267, -0.789071, -1.026530, -1.021566, -0.775352, -0.346032, 0.165005,
     0.637075, 0.958695, 1.053912, 0.900240, 0.533969, 0.041598, -0.460597, -0.854019,
    -1.045758, -0.990533, -0.701386, -0.246602, 0.266419, 0.716523, 0.997415, 1.042760,
     0.841849, 0.442130, -0.062002, -0.551492, -0.910743, -1.054915, -0.949961, -0.620667
])

# === PLOT 1: Magnitude Spectrum ===
plt.figure(figsize=(20, 4))
plt.bar(np.arange(256), magnitude, color='purple')
plt.title('FFT Magnitude Spectrum')
plt.xlabel('Frequency Bin (k)')
plt.ylabel('|X[k]|')
plt.grid(True)
plt.tight_layout()

# === PLOT 2: Pure vs Noisy Signal ===
plt.figure(figsize=(20, 4))
plt.plot(t, pure_sine, label='Pure Sine Wave', linestyle='--')
plt.plot(t, noisy_signal, label='Noisy Signal', alpha=0.7)
plt.title('Pure Sine vs Noisy Input')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)
plt.tight_layout()

# === PLOT 3: Denoised Output vs IFFT Input ===
plt.figure(figsize=(10, 4))
plt.plot(t, noisy_signal, label='Noisy Input to IFFT', alpha=0.5)
plt.plot(t, denoised_signal, label='Denoised Signal (IFFT Output)', linewidth=2)
plt.title('Denoised Output After FFT Filtering + IFFT')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)
plt.tight_layout()

plt.show()

