#define STDOUT 0xd0580000

.section .text
.global _start
_start:

main:                               
    lw a0, size                     # Load size of real/imag arrays into a0
    call setlogN                    # Compute and store log2(size) for shared use by other functions

    la a0, real                     # Load address of real[] into a0
    la a1, imag                     # Load address of imag[] into a1
    lw a2, size                     # Load size of real/imag arrays into a2

    call FFT                        # Perform FFT on real[] and imag[] arrays
    call print                      # Log the values of the arrays for debugging or display

    j _finish                       # Jump to program finish/exit



# setlogN:
# Calculates the base-2 logarithm of a 32-bit unsigned integer stored in a0.
# The result is written to the memory location labeled 'logsize'.
# Inputs:
#   a0 - The unsigned integer N whose log2 is computed.
# Outputs:
#   None directly; the result is stored in 'logsize'.
# Registers altered:
#   t0, t1

ssetlogN:
    clz t0, a0                      # Count leading zeros. Helps in quick log2
    li t1, 31              
    sub t1, t1, t0                  # Subtract clz result from 31 to get log2
    la t0, logsize
    sw t1, 0(t0)                    # Save to memory
    
    jr ra
## reverse:
# Reverses the bit order of a 32-bit integer.
# Parameters:
#   a0 - The integer whose bits are to be reversed.
#   a1 - Number of bits to consider for reversal (optional; defaults to 32).
# Returns:
#   a0 - The integer with bits reversed.
# Modified registers:
#   t0, t1, t2

reverse:                            
    # Swap odd and even bits
    li t0, 0x55555555    # Pattern for odd/even bits
    srli t1, a0, 1       # v >> 1
    and t1, t1, t0       # (v >> 1) & 0x55555555
    and t2, a0, t0       # v & 0x55555555
    slli t2, t2, 1       # (v & 0x55555555) << 1
    or a0, t1, t2        # Result back to a0

    # Swap consecutive pairs
    li t0, 0x33333333    # Pattern for pairs
    srli t1, a0, 2       # v >> 2
    and t1, t1, t0       # (v >> 2) & 0x33333333
    and t2, a0, t0       # v & 0x33333333
    slli t2, t2, 2       # (v & 0x33333333) << 2
    or a0, t1, t2        # Result back to a0

    # Swap nibbles
    li t0, 0x0F0F0F0F    # Pattern for nibbles
    srli t1, a0, 4       # v >> 4
    and t1, t1, t0       # (v >> 4) & 0x0F0F0F0F
    and t2, a0, t0       # v & 0x0F0F0F0F
    slli t2, t2, 4       # (v & 0x0F0F0F0F) << 4
    or a0, t1, t2        # Result back to a0

    # Swap bytes
    li t0, 0x00FF00FF    # Pattern for bytes
    srli t1, a0, 8       # v >> 8
    and t1, t1, t0       # (v >> 8) & 0x00FF00FF
    and t2, a0, t0       # v & 0x00FF00FF
    slli t2, t2, 8       # (v & 0x00FF00FF) << 8
    or a0, t1, t2        # Result back to a0

    # Swap 2-byte pairs
    srli t1, a0, 16      # v >> 16
    slli t2, a0, 16      # v << 16
    or a0, t1, t2        # Final result in a0

    # Save number of bits to reverse in t2
    # bits are in a7
    li t1, 32
    sub t1, t1, a1
    srl a0, a0, t1
    
    ret                            # Return with result in a0
    


# preload_constants:
# Loads floating-point constants into registers for trigonometric calculations.
# Arguments:
#   None
# Result:
#   Registers fs0-fs11 and ft11 are loaded with constant values.
# Registers affected:
#   t0, fs0-fs11, ft11
preload_constants:
    # Load addresses of constants into registers
    # Make use of the fact that all float are 4 bytes and stored consecutively
    la      t0, half_pi_hi          # Load address of half_pi_hi
    flw     fs0, 0(t0)              # Load half_pi_hi into fs0
    flw     fs1, 4(t0)              # Load half_pi_lo into fs1
    flw     fs2, 8(t0)              # Load const_2_pi into fs2
    flw     fs3, 12(t0)             # Load const_12582912 into fs3

    # Load cosine coefficients
    flw     fs4, 16(t0)             # Load 2.44677067e-5 into fs4
    flw     fs5, 20(t0)             # Load -1.38877297e-3 into fs5
    flw     fs6, 24(t0)             # Load 4.16666567e-2 into fs6
    flw     fs7, 28(t0)             # Load -5.00000000e-1 into fs7
    flw     fs8, 32(t0)             # Load 1.00000000e+0 into fs8

    # Load sine coefficients
    flw     fs9, 36(t0)             # Load 2.86567956e-6 into fs9
    flw     fs10, 40(t0)            # Load -1.98559923e-4 into fs10
    flw     fs11, 44(t0)            # Load 8.33338592e-3 into fs11
    flw     ft11, 48(t0)            # Load -1.66666672e-1 into ft11

    ret


# Function: sin_cos_approx
# Computes approximate sine and cosine values for a given floating-point angle using Chebyshev polynomial approximation.
# Source: Adapted from Stack Overflow.
# Input:
#   - fa0: angle in radians
# Output:
#   - fa0: approximated sine of the angle
#   - fa1: approximated cosine of the angle
# Registers used:
#   - t0, t1, ft0, ft1, ft2, ft3
# Temporary variables:
#   - i (t0), ic (t1), j (ft0), a (ft1), sa (ft2), t (ft3)
sin_cos_approx:
    fmadd.s ft0, fa0, fs2, fs3          # j = fmaf(a, 6.36619747e-1, 12582912.0)
    fsub.s ft0, ft0, fs3                # j = j - 12582912.0

    fnmsub.s ft1, ft0, fs0, fa0        # a = a - j * half_pi_hi
    fnmsub.s ft1, ft0, fs1, ft1        # a = a - j * half_pi_lo

    fcvt.w.s t0, ft0                   # i = int(j)
    addi t1, t0, 1                    # ic = i + 1

    fmul.s ft2, ft1, ft1               # sa = a * a

    # Cosine approximation (stored in fa0)
    fmadd.s fa0, fs4, ft2, fs5
    fmadd.s fa0, fa0, ft2, fs6
    fmadd.s fa0, fa0, ft2, fs7
    fmadd.s fa0, fa0, ft2, fs8

    # Sine approximation (stored in fa1)
    fmadd.s fa1, fs9, ft2, fs10
    fmadd.s fa1, fa1, ft2, fs11
    fmadd.s fa1, fa1, ft2, ft11
    fmul.s ft3, ft1, ft2               # t = a * sa
    fmadd.s fa1, fa1, ft3, ft1

    # Adjust sine and cosine based on parity of i
    andi t2, t0, 1
    beqz t2, sine_cos_swap

    # Swap sine and cosine if i is odd
    fmv.s ft0, fa0
    fmv.s fa0, fa1
    fmv.s fa1, ft0

sine_cos_swap:
    # Flip sign of sine if bit 1 of i is set
    andi t0, t0, 2
    beqz t0, sine_sign_done
    fneg.s fa0, fa0

sine_sign_done:
    # Flip sign of cosine if bit 1 of ic is set
    andi t1, t1, 2
    beqz t1, cos_sign_done
    fneg.s fa1, fa1

cos_sign_done:
    ret


# Function: ordina
# Rearranges the elements in the real[] and imag[] arrays according to bit-reversed order.
# Parameters:
#   a0 - pointer to the real[] array
#   a1 - pointer to the imag[] array
#   a2 - length of the arrays (N)
# Returns:
#   Both real[] and imag[] arrays are reordered in-place to their bit-reversed sequence.
# Registers used:
#   t0, t1, t2, t3, t4, t5, ft0, ft1

ordina: 
    addi sp, sp, -20
    sw ra, 0(sp)
    sw a0, 4(sp)
    sw a1, 8(sp)
    sw a3, 12(sp)
    sw a4, 16(sp)
    
    la t4, real_temp               # Load address of temporary real array
    la t5, imag_temp               # Load address of temporary imag array
    mv a3, a0                      # Copy real[] base to a3
    mv a4, a1                      # Copy imag[] base to a4

    lw a1, logsize

    li t3,  0 # i
    forordina:
    bge t3, a2, endforordina

    mv a0, t3                      # Move i to a0 for reverse function
    call reverse                   # Compute bit-reversed index for i

    # Generate Reversed Index Offset
    slli t2, a0, 2  
    add t0, a3, t2  
    add t1, a4, t2 

    # Load from real array
    flw ft0, 0(t0)
    flw ft1, 0(t1)

    # Save to temp array
    fsw ft0, 0(t4)
    fsw ft1, 0(t5)

    # Increment Address
    addi t4, t4, 4  
    addi t5, t5, 4  

    addi t3, t3, 1
    j forordina
    endforordina:

    la t4, real_temp
    la t5, imag_temp
    
    addi t0, zero, 0  # i
    forordina2:
    bge t0, a2, endforordina2

    # Load from temp array
    flw ft0, 0(t4)  
    flw ft1, 0(t5) 

    # Save to normal array
    fsw ft0, 0(a3)  
    fsw ft1, 0(a4)  

    # Increment address
    addi t4, t4, 4
    addi t5, t5, 4
    addi a3, a3, 4
    addi a4, a4, 4

    addi t0, t0, 1
    j forordina2
    endforordina2:
    
    lw ra, 0(sp)
    lw a0, 4(sp)
    lw a1, 8(sp)
    lw a3, 12(sp)
    lw a4, 16(sp)
    addi sp, sp, 20

    jr ra


 
transform:
    addi sp, sp, -4 
    sw ra, 0(sp)

    call ordina 

    la s0, W_real
    la s1, W_imag
    call preload_constants 
    
    # Calculate (inverse)*-2*PI/N into ft4
    mul t0, a2, a3              
    fcvt.s.w ft0, t0            
    la t0, NEG_TWO_PI
    flw ft4, 0(t0)              
    fdiv.s ft4, ft4, ft0        

    addi a6, zero, 0            
    fcvt.s.w fa6, a6        
    li s3, 1
    fcvt.s.w fa5, s3        
    srli s3, a2, 1              

sincosfor:
    bge a6, s3, sincosforend
    fmul.s fa0, ft4, fa6    
    call sin_cos_approx      
    fsw fa1, 0(s0)      
    fsw fa0, 0(s1)    
    addi s0, s0, 4 
    addi s1, s1, 4 
    addi a6, a6, 1  
    fadd.s fa6, fa6, fa5   
    j sincosfor
sincosforend:

    la s0, W_real
    la s1, W_imag
    
    addi t5, zero, 1                        
    srli t6, a2, 1                          
    lw s4, logsize                          

    addi t0, zero, 0                        
transformloop1:
    bge t0, s4, endtransformloop1
   
    mul a3, t5, t6       # stride = n * a

    addi t1, zero, 0                        
transformforloop2:
    bge t1, a2, transformforloop2end
    
    and t2, t1, t5                          
    bne t2, zero, transformelse             

transformif:
    slli t3, t1, 2                          
    add a4, a0, t3                          
    add a5, a1, t3                         
    flw ft0, 0(a4)                          
    flw ft1, 0(a5)                          
    
    mul t3, t1, t6                          
    rem t3, t3, a3                          

    slli t3, t3, 2 
    add t4, s0, t3 
    add t3, s1, t3  
    flw ft2, 0(t4)  
    flw ft3, 0(t3)  
    
    add t4, t1, t5 
    slli t4, t4, 2 
    add a6, t4, a0
    add a7, t4, a1
    flw ft4, 0(a6)  
    flw ft5, 0(a7)  

    # Butterfly core
    fmul.s ft6, ft3, ft5 
    fmsub.s ft6, ft2, ft4, ft6   

    fmul.s ft7, ft3, ft4 
    fmadd.s ft7, ft2, ft5, ft7 

    fadd.s ft8, ft0, ft6                
    fadd.s ft9, ft1, ft7                
    fsub.s ft10, ft0, ft6               
    fsub.s ft11, ft1, ft7               

    fsw ft8, 0(a4)                      
    fsw ft9, 0(a5) 
    fsw ft10, 0(a6)                     
    fsw ft11, 0(a7)
    
transformelse:
    addi t1, t1, 1                      
    j transformforloop2
transformforloop2end:
    slli t5, t5, 1                      
    srli t6, t6, 1                      
    addi t0, t0, 1                      
    j transformloop1
endtransformloop1:

    # Optional: Inverse Scaling
    li t0, -1
    bne a3, t0, end_scaling      # Only scale if a3 == -1 (inverse FFT)

    fcvt.s.w ft0, a2             # ft0 = float(N)
    li t1, 0
scale_loop:
    bge t1, a2, end_scaling
    slli t2, t1, 2
    add t3, a0, t2
    add t4, a1, t2
    flw ft1, 0(t3)
    flw ft2, 0(t4)
    fdiv.s ft1, ft1, ft0
    fdiv.s ft2, ft2, ft0
    fsw ft1, 0(t3)
    fsw ft2, 0(t4)
    addi t1, t1, 1
    j scale_loop

end_scaling:
    lw ra, 0(sp)
    addi sp, sp, 4
    jr ra  

# FFT:
#   Computes the fast Fourier transform for the provided real and imaginary data arrays.
# Arguments:
#   a0 - address of the real part array
#   a1 - address of the imaginary part array
#   a2 - total number of data points (N)
# Result:
#   The input arrays at a0 and a1 are transformed in-place to contain the FFT output.
# Registers affected:
#   None
FFT:                                       
    addi sp, sp, -8
    sw ra, 0(sp)
    sw a3, 4(sp)
    
    li a3, 1                            # Set a3 to 1 (indicates non-inverse FFT)
    call transform                      # Call the 'transform' function (performs FFT)
    
    lw ra, 0(sp)
    lw a3, 4(sp)
    addi sp, sp, 8
    
    jr ra
    


# IFFT:
#   Executes the inverse fast Fourier transform on the input real and imaginary arrays.
# Parameters:
#   a0 - pointer to the real part array
#   a1 - pointer to the imaginary part array
#   a2 - number of elements (N)
# Returns:
#   The real and imaginary arrays are updated in-place with the IFFT result.
# Registers modified:
#   t0, ft0, ft1, ft2

IFFT: 
    addi sp, sp, -16            # Allocate stack space for saving registers
    sw ra, 0(sp)                # Preserve return address
    sw a0, 4(sp)                # Preserve a0 (real pointer)
    sw a1, 8(sp)                # Preserve a1 (imag pointer)
    sw a3, 12(sp)               # Preserve a3 (will be used to signal inverse)

    li a3, -1                   # a3 = -1 to indicate IFFT direction
    call transform              # Perform IFFT via general transform function

    li t0, 0                    # Loop counter i = 0
    fcvt.s.w ft2, a2            # Convert N (int) to float for division

ifft_loop:
    bge t0, a2, ifft_done       # Loop until i == N

    flw ft0, 0(a0)              # Load real[i]
    flw ft1, 0(a1)              # Load imag[i]

    fdiv.s ft0, ft0, ft2        # Divide real by N
    fdiv.s ft1, ft1, ft2        # Divide imag by N

    fsw ft0, 0(a0)              # Store back real[i]
    fsw ft1, 0(a1)              # Store back imag[i]

    addi a0, a0, 4              # Move to next real element
    addi a1, a1, 4              # Move to next imag element

    addi t0, t0, 1              # i++
    j ifft_loop

ifft_done:
    lw ra, 0(sp)                # Restore return address
    lw a0, 4(sp)                # Restore real array pointer
    lw a1, 8(sp)                # Restore imag array pointer
    lw a3, 12(sp)               # Restore a3
    addi sp, sp, 16             # Deallocate stack

    jr ra                       # Return

# Function: print
# Description:
#   Outputs the contents of the real[] and imag[] arrays by loading values into ft0 and ft1 
#   for inspection or debugging purposes.
# Parameters:
#   - a0: Pointer to the start of the real[] array
#   - a1: Pointer to the start of the imag[] array
#   - a2: Number of elements to display
# Registers modified:
#   - t0, t1, t2: Temporaries used for indexing and looping
#   - ft0, ft1: Used to load real and imaginary float values
print:                      
    li t0, 0x123456                 # Pattern for help in python script
    li t0, 0x234567                 # Pattern for help in python script
    li t0, 0x345678                 # Pattern for help in python script

    mv t1, a0                       # Move address to temp register to avoid stacking
    mv t2, a1                       # Move address to temp register to avoid stacking
	li t0, 0		                # load i = 0

    printloop:
    bge t0, a2, endPrintLoop        # Exit loop if i >= size

    flw ft0, 0(t1)                  # Load real[i] into fa0
    flw ft1, 0(t2)                  # Load imag[i] into fa1

    addi t1, t1, 4                  # Increment pointer for real[]
    addi t2, t2, 4                  # Increment pointer for imag[]

    addi t0, t0, 1                  # Increment index
    j printloop                     # Jump to start of loop
    endPrintLoop:

    li t0, 0x123456                 # Pattern for help in python script
    li t0, 0x234567                 # Pattern for help in python script
    li t0, 0x345678                 # Pattern for help in python script
	
	jr ra



# Function: _finish
# VeeR Related function which writes to to_host which stops the simulator
_finish:
    li x3, 0xd0580000
    addi x5, x0, 0xff
    sb x5, 0(x3)
    beq x0, x0, _finish

    .rept 100
        nop
    .endr



.data  
real:
        .rept 128      # 128 * 8 = 1024 values
        .float 1,2,3,4,5,6,7,8
        .endr

    imag:
        .rept 128
        .float 0,0,0,0,0,0,0,0
        .endr
    .set dataSize, 2048    


    .set halfDataSize, dataSize/2 
    size: .word dataSize
    step: .float 1.0
    logsize: .word 0

    real_temp: 
        .rept dataSize
        .float 0
        .endr

    imag_temp:
        .rept dataSize
        .float 0
        .endr

    W_real:
        .rept halfDataSize
        .float 0
        .endr

    W_imag:
        .rept halfDataSize
        .float 0
        .endr

    PI:             .float 3.14159265         # π
    NEG_PI:         .float -3.14159265        # -π
    TWO_PI:         .float 6.28318548         # 2π
    NEG_TWO_PI:     .float -6.28318548        # -2π
    HALF_PI:        .float 1.57079633         # π / 2
    NEG_HALF_PI:    .float -1.57079633        # -π / 2
    ONE:            .float 1.00000000         # 1.0
    TERMS:          .word 12                  # Taylor series terms

    half_pi_hi:     .float 1.57079637e+00     # High part of π/2
    half_pi_lo:     .float -4.37113900e-08    # Low part of π/2 (error term)
    const_2_pi:     .float 0.63661975         # 2/π
    const_12582912: .float 1.2582912e+07      # 1.5 * 2^23, large float constant

    # Cosine coefficients (Taylor or minimax approximation)
    cos_coeff_0:    .float 2.44677100e-05
    cos_coeff_1:    .float -1.38877300e-03
    cos_coeff_2:    .float 4.16666600e-02
    cos_coeff_3:    .float -5.00000000e-01
    cos_coeff_4:    .float 1.00000000e+00

    # Sine coefficients
    sin_coeff_0:    .float 2.86568000e-06
    sin_coeff_1:    .float -1.98560000e-04
    sin_coeff_2:    .float 8.33338600e-03
    sin_coeff_3:    .float -1.66666700e-01