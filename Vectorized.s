.section .text
.globl _start
_start:

main:    
    la sp, STACK
    la ra, _finish

    lw a0, size                     # Load size of real/imag arrays into a0
    call setlogN                    # Compute and store log2(size) for shared use by other functions

    

    # Perform  vFFT
    la a0, real                     # a0 = address of real[]
    la a1, imag                     # a1 = address of imag[]
    lw a2, size                     # a2 = size of arrays (N)

    call vFFT    

    # Print Results
    call print

    # End Program
    j _finish 



setlogN:
    clz t0, a0                      # Count leading zeros. Helps in quick log2
    li t1, 31              
    sub t1, t1, t0                  # Subtract clz result from 31 to get log2
    la t0, logsize
    sw t1, 0(t0)                    # Save to memory
    
    jr ra




vOrdina:
    # Save used callee registers to stack
    addi sp, sp, -36       
    sw ra, 0(sp)
    sw a0, 4(sp)
    sw a1, 8(sp)
    sw a3, 12(sp)
    sw a4, 16(sp)
    sw a5, 20(sp)
    sw a6, 24(sp)
    sw a7, 28(sp)
    sw s0, 32(sp)


    # Load pointers to temp array
    la t0, real_temp
    la t1, imag_temp
    lw s0, logsize
    
    vsetvli t3, a2, e32, m8         # 4-Grouped Vector
    slli t6, t3, 2
    vid.v  v24                      # v24 = {0, 1, 2, ... VLEN-1}

    # Load mask and shift bits for reverse. This is required for reverse function
    li a3, 0x55555555
    li a4, 0x33333333
    li a5, 0x0F0F0F0F
    li a6, 0x00FF00FF  
    li a7, 30                       # mask is 30 instead of 32 to add shift by 2 effect
    sub a7, a7, s0                  # s0 (LOG2_SIZE) will never be more than 30

    li t2, 0                
    vOrdinaLoop:                   
    bge t2, a2, endVOrdinaLoop      

    # Bit reverse the index in v24. Output in v16
    # Swap odd and even bits
    vsrl.vi v16, v24, 1                  # v16 >> 1
    vand.vx v16, v16, a3                # (v16 >> 1) & 0x55555555
    vand.vx v8, v24, a3                  # v16 & 0x55555555
    vsll.vi v8, v8, 1                   # (v16 & 0x55555555) << 1
    vor.vv v16, v16, v8                 # Result back to v16

    # Swap consecutive pairs
    vsrl.vi v8, v16, 2                  # v16 >> 2
    vand.vx v8, v8, a4                  # (v16 >> 2) & 0x33333333
    vand.vx v16, v16, a4                # v16 & 0x33333333
    vsll.vi v16, v16, 2                 # (v16 & 0x33333333) << 2
    vor.vv v16, v8, v16                 # Result back to v16

    # Swap nibbles
    vsrl.vi v8, v16, 4                  # v16 >> 4
    vand.vx v8, v8, a5                  # (v16 >> 4) & 0x0F0F0F0F
    vand.vx v16, v16, a5                # v16 & 0x0F0F0F0F
    vsll.vi v16, v16, 4                 # (v16 & 0x0F0F0F0F) << 4
    vor.vv v16, v8, v16                 # Result back to v16

    # Swap bytes
    vsrl.vi v8, v16, 8                  # v16 >> 8
    vand.vx v8, v8, a6                  # (v16 >> 8) & 0x00FF00FF
    vand.vx v16, v16, a6                # v16 & 0x00FF00FF
    vsll.vi v16, v16, 8                 # (v16 & 0x00FF00FF) << 8
    vor.vv v16, v8, v16                 # Result back to v16

    # Swap 2-byte pairs
    vsrl.vi v8, v16, 16                 # v16 >> 16
    vsll.vi v16, v16, 16                # v16 << 16
    vor.vv v16, v8, v16                 # Final result in v16

    # Shift by the req bit size
    vsrl.vx v16, v16, a7

    # Load/save from  real  array  normal to twmpreversed indexed
    vloxei32.v v8, 0(a0), v16
    vse32.v v8, 0(t0)  

    vloxei32.v v8, 0(a1), v16     
    vse32.v v8, 0(t1)  

    # Save to temp array normal index
            

    # Increment index and coutner
    vadd.vx v24, v24, t3           
    add t2, t2, t3        
    add t0, t0, t6 
    add t1, t1, t6   
    j vOrdinaLoop
    endVOrdinaLoop:

    slli t6, t3, 2                  # Shift VLEN by 4. Now  just add shifted vlen to shifted indexes
    la t4, real_temp
    la t5, imag_temp
    li t1, 0              
    vOrdinaLoop2:                   
    bge t1, a2, endvOrdinaLoop2   

    # Load from temp array
    vle32.v v8, 0(t4)             
    vle32.v v24, 0(t5)            

    # Store to normal array
    vse32.v v8, 0(a0)           
    vse32.v v24, 0(a1)

    add t1, t1, t3     
    add t4, t4, t6            
    add t5, t5, t6            
    add a0, a0, t6            
    add a1, a1, t6            

    j vOrdinaLoop2              
    endvOrdinaLoop2:

    # Restore registers
    lw ra, 0(sp)
    lw a0, 4(sp)
    lw a1, 8(sp)
    lw a3, 12(sp)
    lw a4, 16(sp)
    lw a5, 20(sp)
    lw a6, 24(sp)
    lw a7, 28(sp)
    lw s0, 32(sp)    
    addi sp, sp, 36       

    ret



vTransform:
    addi sp, sp, -36
    sw ra,0(sp)
    sw a0,4(sp)
    sw a1,8(sp)
    sw a2,12(sp)
    sw a3,16(sp)
    sw a4,20(sp)
    sw a5,24(sp)
    sw a6,28(sp)
    sw s0,32(sp)

    # For Index Reverse (Butterfly)
    call vOrdina                    

    # Convert a3 (integer: 1 or -1) to a float
    fcvt.s.w ft0, a3

    # vTransform will work on the temp arrays
    li s1, 8192
    lw s2, logsize
    srl s1, s1, s2          # Stride for butterfly
    la t1, W_real_max
    la t2, W_imag_max
    
    vsetvli t0, a2, e32, m4    

    li a5, 1                        # a5    = n     = 1
    srai a4, a2, 1                  # a4    = a     = N / 2

    li t3, 0                        # t3    = j     = 0
    lw a3, logsize
    

    # t5 is vlen*4
    slli t5, t0, 2

    # k = (i * a) % (n * a); can be done as 
    # k = (i * a) & (N/2 - 1); 
    # Calculate (N/2 - 1) in s0
    addi s0, a4, -1  
    slli s2, s0, 2              

    forTransform:                   #runs logN times
        bge t3, a3, forTransformEnd
        li t4, 0                        # t4 = i = 0
        
        # instead of recalculating (i+n)*4 and i*4
        # precalculate i and i+n, multiply by 4
        # keep adding vlen*4 to them in loop
        vid.v v24
        vsll.vi v24, v24, 2  # i*4

        # also shift n by 2 to calculate i*4 & n without doing one addition
        slli a6, a5, 2
        addi s3, t3, 2
        vinnerloop:                     # for i = 0; i < N
            bge t4, a2, vinnerloopend       # i  >= num elemenets
       
            # Calculating k and offest
            # k = (i * a ) & (N/2 -1)
            vmul.vx v28, v24, a4
            vand.vx v28, v28, s2      

            # Load from W_array[k]
            vmul.vx v28, v28, s1
            vloxei32.v v4, 0(t1), v28
            vloxei32.v v28, 0(t2), v28

            # Now v28 contains W_imag for FFT, or -W_imag for IFFT
            vfsgnjx.vf v28, v28, ft0

            # Calculate i+n offset *dynamically* using a temporary register (e.g., v16)
            vadd.vx v16, v24, a6      # v16 = (i+n)*4 temporarily
            
            # Load from array[i+n]
            vloxei32.v v8, 0(a0), v16
            vloxei32.v v12, 0(a1), v16

            vfmul.vv v16, v4, v8     # v16 = wreal*real[i+n]
            vfnmsac.vv v16, v28, v12   # v16 = v16 - v28*v12 = wreal*real[i+n] - wimag*imag[i+n]

            vfmul.vv v20, v4, v12     # wrealk*imag{i+n}
            vfmacc.vv v20, v28, v8    # v20 = wrealk*imag[i+n] + wrealk*real{i+n}

            # Loading values from index i
            # Calculate mask (i & n)
            vsrl.vx v0, v24, s3    
            vand.vi v0, v0, 1               # doing 4 bcause my indices are multiple of 4
            vrsub.vi v28, v0, 1

            # v8 is basicallt our v0.t mask but in normal form
            vmul.vv v16, v16, v28         # multiply v16 by the mask making it 0 when (i&n)
            vmul.vv v20, v20, v28         # multiply v20 by the mask making it 0 when (i&n)

            vloxei32.v v4, 0(a0), v24       # load real[i]
            vfadd.vv v28, v4, v16
            vfsub.vv v16, v4, v16
            vsoxei32.v v28 , 0(a0), v24      # save to real[i]

            vloxei32.v v28, 0(a1),v24  # load imag[i]
            vfadd.vv v4, v28, v20
            vfsub.vv v20, v28, v20
            vsoxei32.v v4, 0(a1), v24 # save to imag[i]

            # Calculate i+n offset *again* for storing
            vadd.vx v4, v24, a6      # v8 = (i+n)*4

            # v8 and v12 contains the original values 
            # from address a0 and a1
            # v16 and v20 contains the new values 
            # whih have to be written at plaved where v0==0
            vrsub.vi v28, v0, 1
            vmul.vv v16, v16, v28         # multiply v16 by the mask making it 0 when (i&n)
            vmul.vv v20, v20, v28         # multiply v20 by the mask making it 0 when (i&n)

            vloxei32.v v8 , 0(a0), v4
            vloxei32.v v12 , 0(a1), v4
            vmul.vv v8, v8, v0         # multiply v20 by the mask making it 0 when (i&n)
            vmul.vv v12, v12, v0        # multiply v20 by the mask making it 0 when (i&n)
            vor.vv v8, v8, v16
            vor.vv v12, v12, v20

            vsoxei32.v v8 , 0(a0), v4
            vsoxei32.v v12 , 0(a1), v4

            # incremenet v24(i) by vlen*4 (t5)
            vadd.vx v24, v24, t5
        
            add t4, t4, t0                  # i += Vlen
            
            j vinnerloop
        vinnerloopend:

        slli a5, a5, 1                  # n = n * 2 
        srai a4, a4, 1                  # a = a/2 
        addi t3, t3, 1                  # j++
        j forTransform
    forTransformEnd:
   

    lw ra,0(sp)
    lw a0,4(sp)
    lw a1,8(sp)
    lw a2,12(sp)
    lw a3,16(sp)
    lw a4,20(sp)
    lw a5,24(sp)
    lw a6,28(sp)
    lw s0,32(sp)
    addi sp, sp, 36
    jr ra




vFFT:                     
    addi sp, sp, -8
    sw ra, 0(sp)
    sw a3, 8(sp)

    li a3, 0                        # Inverse Flag a3 = 1 for FFT -> fixed it to 0 for fft forward
    call vTransform
   
    lw ra, 0(sp)
    lw a3, 8(sp)
    addi sp, sp, 8
    
    ret



vIFFT:              
    addi sp, sp, -16
    sw ra, 0(sp)            
    sw a0, 4(sp)    
    sw a1, 8(sp)
    sw a3, 12(sp)
    
    li a3, -1                       # Inverse Flag. a3 = -1 for IFFT
    call vTransform
    
    vsetvli t0, a2, e32, m8
    slli t2, t0, 2         # shift vlen by 2 for offest

    fcvt.s.w ft0, a2                # Convert N t0 float as we have to divide

    li t1, 0                        # i = 0. starting index
    vectorIFFTLoop:
    bge t1, a2, endVectorIFFTLoop

    # Load Real/Imag Pair 
    vle32.v v16, 0(a0)               # load t0 real values to vector v16
    vle32.v v8, 0(a1)               # load t0 imag values to vector v8

    # Divide by N
    vfdiv.vf v16, v16, ft0            # v16[i] = v16[i] / ft0 , ft0 is N in input
    vfdiv.vf v8, v8, ft0            # v8[i] = v8[i] / ft0 , ft0 is N in input

    # Save back to memory
    vse32.v v16, 0(a0)
    vse32.v v8, 0(a1)

    # Increment address by VLEN*4
    add a0, a0, t2                  
    add a1, a1, t2                  

    add t1, t1, t0                  # i += VLEN
    j vectorIFFTLoop
    endVectorIFFTLoop:

    lw ra, 0(sp)            
    lw a0, 4(sp)    
    lw a1, 8(sp)
    lw a3, 12(sp)
    addi sp, sp, 16

    ret



print:        
    addi sp, sp, -12
    sw ra, 0(sp)
    sw a0, 4(sp)    
    sw a1, 8(sp)    

    li t0, 0x00123456
    li t0, 0x00234567
    li t0, 0x00345678              # Pattern for help in python script

	li t0, 0
    lw a2, size
    vsetvli t3, a2, e32, m8
    slli t4, t3, 2

    printloop:
    bge t0, a2, endPrintLoop

    # Load Real and Imag
    vle32.v v8, 0(a0)
    vle32.v v16, 0(a1)

    # Increment Pointers
    add a0, a0, t4
    add a1, a1, t4

    # Increment index
    add t0, t0, t3                 
    j printloop
    endPrintLoop:

    li t0, 0x00123456
    li t0, 0x00234567
    li t0, 0x00345678              # Pattern for help in python script
	
    lw ra, 0(sp)
    lw a0, 4(sp)    
    lw a1, 8(sp)   
    addi sp, sp, 12

	ret



_finish:
    li x3, 0xd0580000
    addi x5, x0, 0xff
    sb x5, 0(x3)
    beq x0, x0, _finish
.rept 100
    nop
.endr

.data  

real:
    .rept 128
    .float 1.0
    .endr

imag:
    .rept 128
    .float 0.0
    .endr

.set dataSize, 2048


    .set halfDataSize, dataSize/2 
    size: .word dataSize
    step: .float 1.0
    logsize: .word 0

    real_temp: 
        .rept dataSize
        .float 0
        .endr

    imag_temp:
        .rept dataSize
        .float 0
        .endr


    NEG_TWO_PI: .float -6.28318530717958647692
    half_pi_hi:    .float 1.57079637e+0  # π/2 high part
    half_pi_lo:    .float -4.37113883e-8 # π/2 low part
    const_2_pi:    .float 6.36619747e-1  # 2/π
    const_12582912: .float 12582912.0    # 1.5 * 2^23
    cos_coeff_0:   .float 2.44677067e-5  # Coefficient for cosine
    cos_coeff_1:   .float -1.38877297e-3
    cos_coeff_2:   .float 4.16666567e-2
    cos_coeff_3:   .float -5.00000000e-1
    cos_coeff_4:   .float 1.00000000e+0
    sin_coeff_0:   .float 2.86567956e-6  # Coefficient for sine
    sin_coeff_1:   .float -1.98559923e-4
    sin_coeff_2:   .float 8.33338592e-3
    sin_coeff_3:   .float -1.66666672e-1



.section .rodata
.align 6
W_real_max:
    .float 1.000000000e+00, 9.999811753e-01, 9.999247018e-01, 9.998305818e-01
    .float 9.996988187e-01, 9.995294175e-01, 9.993223846e-01, 9.990777278e-01
    .float 9.987954562e-01, 9.984755806e-01, 9.981181129e-01, 9.977230666e-01
    .float 9.972904567e-01, 9.968202993e-01, 9.963126122e-01, 9.957674145e-01
    .float 9.951847267e-01, 9.945645707e-01, 9.939069700e-01, 9.932119492e-01
    .float 9.924795346e-01, 9.917097537e-01, 9.909026354e-01, 9.900582103e-01
    .float 9.891765100e-01, 9.882575677e-01, 9.873014182e-01, 9.863080972e-01
    .float 9.852776424e-01, 9.842100924e-01, 9.831054874e-01, 9.819638691e-01
    .float 9.807852804e-01, 9.795697657e-01, 9.783173707e-01, 9.770281427e-01
    .float 9.757021300e-01, 9.743393828e-01, 9.729399522e-01, 9.715038910e-01
    .float 9.700312532e-01, 9.685220943e-01, 9.669764710e-01, 9.653944417e-01
    .float 9.637760658e-01, 9.621214043e-01, 9.604305194e-01, 9.587034749e-01
    .float 9.569403357e-01, 9.551411683e-01, 9.533060404e-01, 9.514350210e-01
    .float 9.495281806e-01, 9.475855910e-01, 9.456073254e-01, 9.435934582e-01
    .float 9.415440652e-01, 9.394592236e-01, 9.373390119e-01, 9.351835099e-01
    .float 9.329927988e-01, 9.307669611e-01, 9.285060805e-01, 9.262102421e-01
    .float 9.238795325e-01, 9.215140393e-01, 9.191138517e-01, 9.166790599e-01
    .float 9.142097557e-01, 9.117060320e-01, 9.091679831e-01, 9.065957045e-01
    .float 9.039892931e-01, 9.013488470e-01, 8.986744657e-01, 8.959662498e-01
    .float 8.932243012e-01, 8.904487232e-01, 8.876396204e-01, 8.847970984e-01
    .float 8.819212643e-01, 8.790122264e-01, 8.760700942e-01, 8.730949784e-01
    .float 8.700869911e-01, 8.670462455e-01, 8.639728561e-01, 8.608669386e-01
    .float 8.577286100e-01, 8.545579884e-01, 8.513551931e-01, 8.481203448e-01
    .float 8.448535652e-01, 8.415549774e-01, 8.382247056e-01, 8.348628750e-01
    .float 8.314696123e-01, 8.280450453e-01, 8.245893028e-01, 8.211025150e-01
    .float 8.175848132e-01, 8.140363297e-01, 8.104571983e-01, 8.068475535e-01
    .float 8.032075315e-01, 7.995372691e-01, 7.958369046e-01, 7.921065773e-01
    .float 7.883464276e-01, 7.845565972e-01, 7.807372286e-01, 7.768884657e-01
    .float 7.730104534e-01, 7.691033376e-01, 7.651672656e-01, 7.612023855e-01
    .float 7.572088465e-01, 7.531867990e-01, 7.491363945e-01, 7.450577854e-01
    .float 7.409511254e-01, 7.368165689e-01, 7.326542717e-01, 7.284643904e-01
    .float 7.242470830e-01, 7.200025080e-01, 7.157308253e-01, 7.114321957e-01
    .float 7.071067812e-01, 7.027547445e-01, 6.983762494e-01, 6.939714609e-01
    .float 6.895405447e-01, 6.850836678e-01, 6.806009978e-01, 6.760927036e-01
    .float 6.715589548e-01, 6.669999223e-01, 6.624157776e-01, 6.578066933e-01
    .float 6.531728430e-01, 6.485144010e-01, 6.438315429e-01, 6.391244449e-01
    .float 6.343932842e-01, 6.296382389e-01, 6.248594881e-01, 6.200572118e-01
    .float 6.152315906e-01, 6.103828063e-01, 6.055110414e-01, 6.006164794e-01
    .float 5.956993045e-01, 5.907597019e-01, 5.857978575e-01, 5.808139581e-01
    .float 5.758081914e-01, 5.707807459e-01, 5.657318108e-01, 5.606615762e-01
    .float 5.555702330e-01, 5.504579729e-01, 5.453249884e-01, 5.401714727e-01
    .float 5.349976199e-01, 5.298036247e-01, 5.245896827e-01, 5.193559902e-01
    .float 5.141027442e-01, 5.088301425e-01, 5.035383837e-01, 4.982276670e-01
    .float 4.928981922e-01, 4.875501601e-01, 4.821837721e-01, 4.767992301e-01
    .float 4.713967368e-01, 4.659764958e-01, 4.605387110e-01, 4.550835871e-01
    .float 4.496113297e-01, 4.441221446e-01, 4.386162385e-01, 4.330938189e-01
    .float 4.275550934e-01, 4.220002708e-01, 4.164295601e-01, 4.108431711e-01
    .float 4.052413140e-01, 3.996241998e-01, 3.939920401e-01, 3.883450467e-01
    .float 3.826834324e-01, 3.770074102e-01, 3.713171940e-01, 3.656129978e-01
    .float 3.598950365e-01, 3.541635254e-01, 3.484186802e-01, 3.426607173e-01
    .float 3.368898534e-01, 3.311063058e-01, 3.253102922e-01, 3.195020308e-01
    .float 3.136817404e-01, 3.078496400e-01, 3.020059493e-01, 2.961508882e-01
    .float 2.902846773e-01, 2.844075372e-01, 2.785196894e-01, 2.726213554e-01
    .float 2.667127575e-01, 2.607941179e-01, 2.548656596e-01, 2.489276057e-01
    .float 2.429801799e-01, 2.370236060e-01, 2.310581083e-01, 2.250839114e-01
    .float 2.191012402e-01, 2.131103199e-01, 2.071113762e-01, 2.011046348e-01
    .float 1.950903220e-01, 1.890686641e-01, 1.830398880e-01, 1.770042204e-01
    .float 1.709618888e-01, 1.649131205e-01, 1.588581433e-01, 1.527971853e-01
    .float 1.467304745e-01, 1.406582393e-01, 1.345807085e-01, 1.284981108e-01
    .float 1.224106752e-01, 1.163186309e-01, 1.102222073e-01, 1.041216339e-01
    .float 9.801714033e-02, 9.190895650e-02, 8.579731234e-02, 7.968243797e-02
    .float 7.356456360e-02, 6.744391956e-02, 6.132073630e-02, 5.519524435e-02
    .float 4.906767433e-02, 4.293825693e-02, 3.680722294e-02, 3.067480318e-02
    .float 2.454122852e-02, 1.840672991e-02, 1.227153829e-02, 6.135884649e-03
    .float 6.123233996e-17, -6.135884649e-03, -1.227153829e-02, -1.840672991e-02
    .float -2.454122852e-02, -3.067480318e-02, -3.680722294e-02, -4.293825693e-02
    .float -4.906767433e-02, -5.519524435e-02, -6.132073630e-02, -6.744391956e-02
    .float -7.356456360e-02, -7.968243797e-02, -8.579731234e-02, -9.190895650e-02
    .float -9.801714033e-02, -1.041216339e-01, -1.102222073e-01, -1.163186309e-01
    .float -1.224106752e-01, -1.284981108e-01, -1.345807085e-01, -1.406582393e-01
    .float -1.467304745e-01, -1.527971853e-01, -1.588581433e-01, -1.649131205e-01
    .float -1.709618888e-01, -1.770042204e-01, -1.830398880e-01, -1.890686641e-01
    .float -1.950903220e-01, -2.011046348e-01, -2.071113762e-01, -2.131103199e-01
    .float -2.191012402e-01, -2.250839114e-01, -2.310581083e-01, -2.370236060e-01
    .float -2.429801799e-01, -2.489276057e-01, -2.548656596e-01, -2.607941179e-01
    .float -2.667127575e-01, -2.726213554e-01, -2.785196894e-01, -2.844075372e-01
    .float -2.902846773e-01, -2.961508882e-01, -3.020059493e-01, -3.078496400e-01
    .float -3.136817404e-01, -3.195020308e-01, -3.253102922e-01, -3.311063058e-01
    .float -3.368898534e-01, -3.426607173e-01, -3.484186802e-01, -3.541635254e-01
    .float -3.598950365e-01, -3.656129978e-01, -3.713171940e-01, -3.770074102e-01
    .float -3.826834324e-01, -3.883450467e-01, -3.939920401e-01, -3.996241998e-01
    .float -4.052413140e-01, -4.108431711e-01, -4.164295601e-01, -4.220002708e-01
    .float -4.275550934e-01, -4.330938189e-01, -4.386162385e-01, -4.441221446e-01
    .float -4.496113297e-01, -4.550835871e-01, -4.605387110e-01, -4.659764958e-01
    .float -4.713967368e-01, -4.767992301e-01, -4.821837721e-01, -4.875501601e-01
    .float -4.928981922e-01, -4.982276670e-01, -5.035383837e-01, -5.088301425e-01
    .float -5.141027442e-01, -5.193559902e-01, -5.245896827e-01, -5.298036247e-01
    .float -5.349976199e-01, -5.401714727e-01, -5.453249884e-01, -5.504579729e-01
    .float -5.555702330e-01, -5.606615762e-01, -5.657318108e-01, -5.707807459e-01
    .float -5.758081914e-01, -5.808139581e-01, -5.857978575e-01, -5.907597019e-01
    .float -5.956993045e-01, -6.006164794e-01, -6.055110414e-01, -6.103828063e-01
    .float -6.152315906e-01, -6.200572118e-01, -6.248594881e-01, -6.296382389e-01
    .float -6.343932842e-01, -6.391244449e-01, -6.438315429e-01, -6.485144010e-01
    .float -6.531728430e-01, -6.578066933e-01, -6.624157776e-01, -6.669999223e-01
    .float -6.715589548e-01, -6.760927036e-01, -6.806009978e-01, -6.850836678e-01
    .float -6.895405447e-01, -6.939714609e-01, -6.983762494e-01, -7.027547445e-01
    .float -7.071067812e-01, -7.114321957e-01, -7.157308253e-01, -7.200025080e-01
    .float -7.242470830e-01, -7.284643904e-01, -7.326542717e-01, -7.368165689e-01
    .float -7.409511254e-01, -7.450577854e-01, -7.491363945e-01, -7.531867990e-01
    .float -7.572088465e-01, -7.612023855e-01, -7.651672656e-01, -7.691033376e-01
    .float -7.730104534e-01, -7.768884657e-01, -7.807372286e-01, -7.845565972e-01
    .float -7.883464276e-01, -7.921065773e-01, -7.958369046e-01, -7.995372691e-01
    .float -8.032075315e-01, -8.068475535e-01, -8.104571983e-01, -8.140363297e-01
    .float -8.175848132e-01, -8.211025150e-01, -8.245893028e-01, -8.280450453e-01
    .float -8.314696123e-01, -8.348628750e-01, -8.382247056e-01, -8.415549774e-01
    .float -8.448535652e-01, -8.481203448e-01, -8.513551931e-01, -8.545579884e-01
    .float -8.577286100e-01, -8.608669386e-01, -8.639728561e-01, -8.670462455e-01
    .float -8.700869911e-01, -8.730949784e-01, -8.760700942e-01, -8.790122264e-01
    .float -8.819212643e-01, -8.847970984e-01, -8.876396204e-01, -8.904487232e-01
    .float -8.932243012e-01, -8.959662498e-01, -8.986744657e-01, -9.013488470e-01
    .float -9.039892931e-01, -9.065957045e-01, -9.091679831e-01, -9.117060320e-01
    .float -9.142097557e-01, -9.166790599e-01, -9.191138517e-01, -9.215140393e-01
    .float -9.238795325e-01, -9.262102421e-01, -9.285060805e-01, -9.307669611e-01
    .float -9.329927988e-01, -9.351835099e-01, -9.373390119e-01, -9.394592236e-01
    .float -9.415440652e-01, -9.435934582e-01, -9.456073254e-01, -9.475855910e-01
    .float -9.495281806e-01, -9.514350210e-01, -9.533060404e-01, -9.551411683e-01
    .float -9.569403357e-01, -9.587034749e-01, -9.604305194e-01, -9.621214043e-01
    .float -9.637760658e-01, -9.653944417e-01, -9.669764710e-01, -9.685220943e-01
    .float -9.700312532e-01, -9.715038910e-01, -9.729399522e-01, -9.743393828e-01
    .float -9.757021300e-01, -9.770281427e-01, -9.783173707e-01, -9.795697657e-01
    .float -9.807852804e-01, -9.819638691e-01, -9.831054874e-01, -9.842100924e-01
    .float -9.852776424e-01, -9.863080972e-01, -9.873014182e-01, -9.882575677e-01
    .float -9.891765100e-01, -9.900582103e-01, -9.909026354e-01, -9.917097537e-01
    .float -9.924795346e-01, -9.932119492e-01, -9.939069700e-01, -9.945645707e-01
    .float -9.951847267e-01, -9.957674145e-01, -9.963126122e-01, -9.968202993e-01
    .float -9.972904567e-01, -9.977230666e-01, -9.981181129e-01, -9.984755806e-01
    .float -9.987954562e-01, -9.990777278e-01, -9.993223846e-01, -9.995294175e-01
    .float -9.996988187e-01, -9.998305818e-01, -9.999247018e-01, -9.999811753e-01

.align 6
W_imag_max:
    .float -0.000000000e+00, -6.135884649e-03, -1.227153829e-02, -1.840672991e-02
    .float -2.454122852e-02, -3.067480318e-02, -3.680722294e-02, -4.293825693e-02
    .float -4.906767433e-02, -5.519524435e-02, -6.132073630e-02, -6.744391956e-02
    .float -7.356456360e-02, -7.968243797e-02, -8.579731234e-02, -9.190895650e-02
    .float -9.801714033e-02, -1.041216339e-01, -1.102222073e-01, -1.163186309e-01
    .float -1.224106752e-01, -1.284981108e-01, -1.345807085e-01, -1.406582393e-01
    .float -1.467304745e-01, -1.527971853e-01, -1.588581433e-01, -1.649131205e-01
    .float -1.709618888e-01, -1.770042204e-01, -1.830398880e-01, -1.890686641e-01
    .float -1.950903220e-01, -2.011046348e-01, -2.071113762e-01, -2.131103199e-01
    .float -2.191012402e-01, -2.250839114e-01, -2.310581083e-01, -2.370236060e-01
    .float -2.429801799e-01, -2.489276057e-01, -2.548656596e-01, -2.607941179e-01
    .float -2.667127575e-01, -2.726213554e-01, -2.785196894e-01, -2.844075372e-01
    .float -2.902846773e-01, -2.961508882e-01, -3.020059493e-01, -3.078496400e-01
    .float -3.136817404e-01, -3.195020308e-01, -3.253102922e-01, -3.311063058e-01
    .float -3.368898534e-01, -3.426607173e-01, -3.484186802e-01, -3.541635254e-01
    .float -3.598950365e-01, -3.656129978e-01, -3.713171940e-01, -3.770074102e-01
    .float -3.826834324e-01, -3.883450467e-01, -3.939920401e-01, -3.996241998e-01
    .float -4.052413140e-01, -4.108431711e-01, -4.164295601e-01, -4.220002708e-01
    .float -4.275550934e-01, -4.330938189e-01, -4.386162385e-01, -4.441221446e-01
    .float -4.496113297e-01, -4.550835871e-01, -4.605387110e-01, -4.659764958e-01
    .float -4.713967368e-01, -4.767992301e-01, -4.821837721e-01, -4.875501601e-01
    .float -4.928981922e-01, -4.982276670e-01, -5.035383837e-01, -5.088301425e-01
    .float -5.141027442e-01, -5.193559902e-01, -5.245896827e-01, -5.298036247e-01
    .float -5.349976199e-01, -5.401714727e-01, -5.453249884e-01, -5.504579729e-01
    .float -5.555702330e-01, -5.606615762e-01, -5.657318108e-01, -5.707807459e-01
    .float -5.758081914e-01, -5.808139581e-01, -5.857978575e-01, -5.907597019e-01
    .float -5.956993045e-01, -6.006164794e-01, -6.055110414e-01, -6.103828063e-01
    .float -6.152315906e-01, -6.200572118e-01, -6.248594881e-01, -6.296382389e-01
    .float -6.343932842e-01, -6.391244449e-01, -6.438315429e-01, -6.485144010e-01
    .float -6.531728430e-01, -6.578066933e-01, -6.624157776e-01, -6.669999223e-01
    .float -6.715589548e-01, -6.760927036e-01, -6.806009978e-01, -6.850836678e-01
    .float -6.895405447e-01, -6.939714609e-01, -6.983762494e-01, -7.027547445e-01
    .float -7.071067812e-01, -7.114321957e-01, -7.157308253e-01, -7.200025080e-01
    .float -7.242470830e-01, -7.284643904e-01, -7.326542717e-01, -7.368165689e-01
    .float -7.409511254e-01, -7.450577854e-01, -7.491363945e-01, -7.531867990e-01
    .float -7.572088465e-01, -7.612023855e-01, -7.651672656e-01, -7.691033376e-01
    .float -7.730104534e-01, -7.768884657e-01, -7.807372286e-01, -7.845565972e-01
    .float -7.883464276e-01, -7.921065773e-01, -7.958369046e-01, -7.995372691e-01
    .float -8.032075315e-01, -8.068475535e-01, -8.104571983e-01, -8.140363297e-01
    .float -8.175848132e-01, -8.211025150e-01, -8.245893028e-01, -8.280450453e-01
    .float -8.314696123e-01, -8.348628750e-01, -8.382247056e-01, -8.415549774e-01
    .float -8.448535652e-01, -8.481203448e-01, -8.513551931e-01, -8.545579884e-01
    .float -8.577286100e-01, -8.608669386e-01, -8.639728561e-01, -8.670462455e-01
    .float -8.700869911e-01, -8.730949784e-01, -8.760700942e-01, -8.790122264e-01
    .float -8.819212643e-01, -8.847970984e-01, -8.876396204e-01, -8.904487232e-01
    .float -8.932243012e-01, -8.959662498e-01, -8.986744657e-01, -9.013488470e-01
    .float -9.039892931e-01, -9.065957045e-01, -9.091679831e-01, -9.117060320e-01
    .float -9.142097557e-01, -9.166790599e-01, -9.191138517e-01, -9.215140393e-01
    .float -9.238795325e-01, -9.262102421e-01, -9.285060805e-01, -9.307669611e-01
    .float -9.329927988e-01, -9.351835099e-01, -9.373390119e-01, -9.394592236e-01
    .float -9.415440652e-01, -9.435934582e-01, -9.456073254e-01, -9.475855910e-01
    .float -9.495281806e-01, -9.514350210e-01, -9.533060404e-01, -9.551411683e-01
    .float -9.569403357e-01, -9.587034749e-01, -9.604305194e-01, -9.621214043e-01
    .float -9.637760658e-01, -9.653944417e-01, -9.669764710e-01, -9.685220943e-01
    .float -9.700312532e-01, -9.715038910e-01, -9.729399522e-01, -9.743393828e-01
    .float -9.757021300e-01, -9.770281427e-01, -9.783173707e-01, -9.795697657e-01
    .float -9.807852804e-01, -9.819638691e-01, -9.831054874e-01, -9.842100924e-01
    .float -9.852776424e-01, -9.863080972e-01, -9.873014182e-01, -9.882575677e-01
    .float -9.891765100e-01, -9.900582103e-01, -9.909026354e-01, -9.917097537e-01
    .float -9.924795346e-01, -9.932119492e-01, -9.939069700e-01, -9.945645707e-01
    .float -9.951847267e-01, -9.957674145e-01, -9.963126122e-01, -9.968202993e-01
    .float -9.972904567e-01, -9.977230666e-01, -9.981181129e-01, -9.984755806e-01
    .float -9.987954562e-01, -9.990777278e-01, -9.993223846e-01, -9.995294175e-01
    .float -9.996988187e-01, -9.998305818e-01, -9.999247018e-01, -9.999811753e-01
    .float -1.000000000e+00, -9.999811753e-01, -9.999247018e-01, -9.998305818e-01
    .float -9.996988187e-01, -9.995294175e-01, -9.993223846e-01, -9.990777278e-01
    .float -9.987954562e-01, -9.984755806e-01, -9.981181129e-01, -9.977230666e-01
    .float -9.972904567e-01, -9.968202993e-01, -9.963126122e-01, -9.957674145e-01
    .float -9.951847267e-01, -9.945645707e-01, -9.939069700e-01, -9.932119492e-01
    .float -9.924795346e-01, -9.917097537e-01, -9.909026354e-01, -9.900582103e-01
    .float -9.891765100e-01, -9.882575677e-01, -9.873014182e-01, -9.863080972e-01
    .float -9.852776424e-01, -9.842100924e-01, -9.831054874e-01, -9.819638691e-01
    .float -9.807852804e-01, -9.795697657e-01, -9.783173707e-01, -9.770281427e-01
    .float -9.757021300e-01, -9.743393828e-01, -9.729399522e-01, -9.715038910e-01
    .float -9.700312532e-01, -9.685220943e-01, -9.669764710e-01, -9.653944417e-01
    .float -9.637760658e-01, -9.621214043e-01, -9.604305194e-01, -9.587034749e-01
    .float -9.569403357e-01, -9.551411683e-01, -9.533060404e-01, -9.514350210e-01
    .float -9.495281806e-01, -9.475855910e-01, -9.456073254e-01, -9.435934582e-01
    .float -9.415440652e-01, -9.394592236e-01, -9.373390119e-01, -9.351835099e-01
    .float -9.329927988e-01, -9.307669611e-01, -9.285060805e-01, -9.262102421e-01
    .float -9.238795325e-01, -9.215140393e-01, -9.191138517e-01, -9.166790599e-01
    .float -9.142097557e-01, -9.117060320e-01, -9.091679831e-01, -9.065957045e-01
    .float -9.039892931e-01, -9.013488470e-01, -8.986744657e-01, -8.959662498e-01
    .float -8.932243012e-01, -8.904487232e-01, -8.876396204e-01, -8.847970984e-01
    .float -8.819212643e-01, -8.790122264e-01, -8.760700942e-01, -8.730949784e-01
    .float -8.700869911e-01, -8.670462455e-01, -8.639728561e-01, -8.608669386e-01
    .float -8.577286100e-01, -8.545579884e-01, -8.513551931e-01, -8.481203448e-01
    .float -8.448535652e-01, -8.415549774e-01, -8.382247056e-01, -8.348628750e-01
    .float -8.314696123e-01, -8.280450453e-01, -8.245893028e-01, -8.211025150e-01
    .float -8.175848132e-01, -8.140363297e-01, -8.104571983e-01, -8.068475535e-01
    .float -8.032075315e-01, -7.995372691e-01, -7.958369046e-01, -7.921065773e-01
    .float -7.883464276e-01, -7.845565972e-01, -7.807372286e-01, -7.768884657e-01
    .float -7.730104534e-01, -7.691033376e-01, -7.651672656e-01, -7.612023855e-01
    .float -7.572088465e-01, -7.531867990e-01, -7.491363945e-01, -7.450577854e-01
    .float -7.409511254e-01, -7.368165689e-01, -7.326542717e-01, -7.284643904e-01
    .float -7.242470830e-01, -7.200025080e-01, -7.157308253e-01, -7.114321957e-01
    .float -7.071067812e-01, -7.027547445e-01, -6.983762494e-01, -6.939714609e-01
    .float -6.895405447e-01, -6.850836678e-01, -6.806009978e-01, -6.760927036e-01
    .float -6.715589548e-01, -6.669999223e-01, -6.624157776e-01, -6.578066933e-01
    .float -6.531728430e-01, -6.485144010e-01, -6.438315429e-01, -6.391244449e-01
    .float -6.343932842e-01, -6.296382389e-01, -6.248594881e-01, -6.200572118e-01
    .float -6.152315906e-01, -6.103828063e-01, -6.055110414e-01, -6.006164794e-01
    .float -5.956993045e-01, -5.907597019e-01, -5.857978575e-01, -5.808139581e-01
    .float -5.758081914e-01, -5.707807459e-01, -5.657318108e-01, -5.606615762e-01
    .float -5.555702330e-01, -5.504579729e-01, -5.453249884e-01, -5.401714727e-01
    .float -5.349976199e-01, -5.298036247e-01, -5.245896827e-01, -5.193559902e-01
    .float -5.141027442e-01, -5.088301425e-01, -5.035383837e-01, -4.982276670e-01
    .float -4.928981922e-01, -4.875501601e-01, -4.821837721e-01, -4.767992301e-01
    .float -4.713967368e-01, -4.659764958e-01, -4.605387110e-01, -4.550835871e-01
    .float -4.496113297e-01, -4.441221446e-01, -4.386162385e-01, -4.330938189e-01
    .float -4.275550934e-01, -4.220002708e-01, -4.164295601e-01, -4.108431711e-01
    .float -4.052413140e-01, -3.996241998e-01, -3.939920401e-01, -3.883450467e-01
    .float -3.826834324e-01, -3.770074102e-01, -3.713171940e-01, -3.656129978e-01
    .float -3.598950365e-01, -3.541635254e-01, -3.484186802e-01, -3.426607173e-01
    .float -3.368898534e-01, -3.311063058e-01, -3.253102922e-01, -3.195020308e-01
    .float -3.136817404e-01, -3.078496400e-01, -3.020059493e-01, -2.961508882e-01
    .float -2.902846773e-01, -2.844075372e-01, -2.785196894e-01, -2.726213554e-01
    .float -2.667127575e-01, -2.607941179e-01, -2.548656596e-01, -2.489276057e-01
    .float -2.429801799e-01, -2.370236060e-01, -2.310581083e-01, -2.250839114e-01
    .float -2.191012402e-01, -2.131103199e-01, -2.071113762e-01, -2.011046348e-01
    .float -1.950903220e-01, -1.890686641e-01, -1.830398880e-01, -1.770042204e-01
    .float -1.709618888e-01, -1.649131205e-01, -1.588581433e-01, -1.527971853e-01
    .float -1.467304745e-01, -1.406582393e-01, -1.345807085e-01, -1.284981108e-01
    .float -1.224106752e-01, -1.163186309e-01, -1.102222073e-01, -1.041216339e-01
    .float -9.801714033e-02, -9.190895650e-02, -8.579731234e-02, -7.968243797e-02
    .float -7.356456360e-02, -6.744391956e-02, -6.132073630e-02, -5.519524435e-02
    .float -4.906767433e-02, -4.293825693e-02, -3.680722294e-02, -3.067480318e-02
    .float -2.454122852e-02, -1.840672991e-02, -1.227153829e-02, -6.135884649e-03

    
