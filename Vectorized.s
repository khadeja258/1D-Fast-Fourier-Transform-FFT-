# - real[1024] and imag[1024] contain input data
# - W_real[1024] and W_imag[1024] are precomputed twiddle factors
# - direction = 1 for FFT, -1 for IFFT

.section .data
real:
    .rept 1024
    .float 1.0
    .endr

imag:
    .rept 1024
    .float 0.0
    .endr
N:          .word 1024
logN:       .word 10

W_real:
    # Precomputed cos(2*pi*k/N), k=0..1023
       .float 1.000000000e+00, 9.999811753e-01, 9.999247018e-01, 9.998305818e-01
    .float 9.996988187e-01, 9.995294175e-01, 9.993223846e-01, 9.990777278e-01
    .float 9.987954562e-01, 9.984755806e-01, 9.981181129e-01, 9.977230666e-01
    .float 9.972904567e-01, 9.968202993e-01, 9.963126122e-01, 9.957674145e-01
    .float 9.951847267e-01, 9.945645707e-01, 9.939069700e-01, 9.932119492e-01
    .float 9.924795346e-01, 9.917097537e-01, 9.909026354e-01, 9.900582103e-01
    .float 9.891765100e-01, 9.882575677e-01, 9.873014182e-01, 9.863080972e-01
    .float 9.852776424e-01, 9.842100924e-01, 9.831054874e-01, 9.819638691e-01
    .float 9.807852804e-01, 9.795697657e-01, 9.783173707e-01, 9.770281427e-01
    .float 9.757021300e-01, 9.743393828e-01, 9.729399522e-01, 9.715038910e-01
    .float 9.700312532e-01, 9.685220943e-01, 9.669764710e-01, 9.653944417e-01
    .float 9.637760658e-01, 9.621214043e-01, 9.604305194e-01, 9.587034749e-01
    .float 9.569403357e-01, 9.551411683e-01, 9.533060404e-01, 9.514350210e-01
    .float 9.495281806e-01, 9.475855910e-01, 9.456073254e-01, 9.435934582e-01
    .float 9.415440652e-01, 9.394592236e-01, 9.373390119e-01, 9.351835099e-01
    .float 9.329927988e-01, 9.307669611e-01, 9.285060805e-01, 9.262102421e-01
    .float 9.238795325e-01, 9.215140393e-01, 9.191138517e-01, 9.166790599e-01
    .float 9.142097557e-01, 9.117060320e-01, 9.091679831e-01, 9.065957045e-01
    .float 9.039892931e-01, 9.013488470e-01, 8.986744657e-01, 8.959662498e-01
    .float 8.932243012e-01, 8.904487232e-01, 8.876396204e-01, 8.847970984e-01
    .float 8.819212643e-01, 8.790122264e-01, 8.760700942e-01, 8.730949784e-01
    .float 8.700869911e-01, 8.670462455e-01, 8.639728561e-01, 8.608669386e-01
    .float 8.577286100e-01, 8.545579884e-01, 8.513551931e-01, 8.481203448e-01
    .float 8.448535652e-01, 8.415549774e-01, 8.382247056e-01, 8.348628750e-01
    .float 8.314696123e-01, 8.280450453e-01, 8.245893028e-01, 8.211025150e-01
    .float 8.175848132e-01, 8.140363297e-01, 8.104571983e-01, 8.068475535e-01
    .float 8.032075315e-01, 7.995372691e-01, 7.958369046e-01, 7.921065773e-01
    .float 7.883464276e-01, 7.845565972e-01, 7.807372286e-01, 7.768884657e-01
    .float 7.730104534e-01, 7.691033376e-01, 7.651672656e-01, 7.612023855e-01
    .float 7.572088465e-01, 7.531867990e-01, 7.491363945e-01, 7.450577854e-01
    .float 7.409511254e-01, 7.368165689e-01, 7.326542717e-01, 7.284643904e-01
    .float 7.242470830e-01, 7.200025080e-01, 7.157308253e-01, 7.114321957e-01
    .float 7.071067812e-01, 7.027547445e-01, 6.983762494e-01, 6.939714609e-01
    .float 6.895405447e-01, 6.850836678e-01, 6.806009978e-01, 6.760927036e-01
    .float 6.715589548e-01, 6.669999223e-01, 6.624157776e-01, 6.578066933e-01
    .float 6.531728430e-01, 6.485144010e-01, 6.438315429e-01, 6.391244449e-01
    .float 6.343932842e-01, 6.296382389e-01, 6.248594881e-01, 6.200572118e-01
    .float 6.152315906e-01, 6.103828063e-01, 6.055110414e-01, 6.006164794e-01
    .float 5.956993045e-01, 5.907597019e-01, 5.857978575e-01, 5.808139581e-01
    .float 5.758081914e-01, 5.707807459e-01, 5.657318108e-01, 5.606615762e-01
    .float 5.555702330e-01, 5.504579729e-01, 5.453249884e-01, 5.401714727e-01
    .float 5.349976199e-01, 5.298036247e-01, 5.245896827e-01, 5.193559902e-01
    .float 5.141027442e-01, 5.088301425e-01, 5.035383837e-01, 4.982276670e-01
    .float 4.928981922e-01, 4.875501601e-01, 4.821837721e-01, 4.767992301e-01
    .float 4.713967368e-01, 4.659764958e-01, 4.605387110e-01, 4.550835871e-01
    .float 4.496113297e-01, 4.441221446e-01, 4.386162385e-01, 4.330938189e-01
    .float 4.275550934e-01, 4.220002708e-01, 4.164295601e-01, 4.108431711e-01
    .float 4.052413140e-01, 3.996241998e-01, 3.939920401e-01, 3.883450467e-01
    .float 3.826834324e-01, 3.770074102e-01, 3.713171940e-01, 3.656129978e-01
    .float 3.598950365e-01, 3.541635254e-01, 3.484186802e-01, 3.426607173e-01
    .float 3.368898534e-01, 3.311063058e-01, 3.253102922e-01, 3.195020308e-01
    .float 3.136817404e-01, 3.078496400e-01, 3.020059493e-01, 2.961508882e-01
    .float 2.902846773e-01, 2.844075372e-01, 2.785196894e-01, 2.726213554e-01
    .float 2.667127575e-01, 2.607941179e-01, 2.548656596e-01, 2.489276057e-01
    .float 2.429801799e-01, 2.370236060e-01, 2.310581083e-01, 2.250839114e-01
    .float 2.191012402e-01, 2.131103199e-01, 2.071113762e-01, 2.011046348e-01
    .float 1.950903220e-01, 1.890686641e-01, 1.830398880e-01, 1.770042204e-01
    .float 1.709618888e-01, 1.649131205e-01, 1.588581433e-01, 1.527971853e-01
    .float 1.467304745e-01, 1.406582393e-01, 1.345807085e-01, 1.284981108e-01
    .float 1.224106752e-01, 1.163186309e-01, 1.102222073e-01, 1.041216339e-01
    .float 9.801714033e-02, 9.190895650e-02, 8.579731234e-02, 7.968243797e-02
    .float 7.356456360e-02, 6.744391956e-02, 6.132073630e-02, 5.519524435e-02
    .float 4.906767433e-02, 4.293825693e-02, 3.680722294e-02, 3.067480318e-02
    .float 2.454122852e-02, 1.840672991e-02, 1.227153829e-02, 6.135884649e-03
    .float 6.123233996e-17, -6.135884649e-03, -1.227153829e-02, -1.840672991e-02
    .float -2.454122852e-02, -3.067480318e-02, -3.680722294e-02, -4.293825693e-02
    .float -4.906767433e-02, -5.519524435e-02, -6.132073630e-02, -6.744391956e-02
    .float -7.356456360e-02, -7.968243797e-02, -8.579731234e-02, -9.190895650e-02
    .float -9.801714033e-02, -1.041216339e-01, -1.102222073e-01, -1.163186309e-01
    .float -1.224106752e-01, -1.284981108e-01, -1.345807085e-01, -1.406582393e-01
    .float -1.467304745e-01, -1.527971853e-01, -1.588581433e-01, -1.649131205e-01
    .float -1.709618888e-01, -1.770042204e-01, -1.830398880e-01, -1.890686641e-01
    .float -1.950903220e-01, -2.011046348e-01, -2.071113762e-01, -2.131103199e-01
    .float -2.191012402e-01, -2.250839114e-01, -2.310581083e-01, -2.370236060e-01
    .float -2.429801799e-01, -2.489276057e-01, -2.548656596e-01, -2.607941179e-01
    .float -2.667127575e-01, -2.726213554e-01, -2.785196894e-01, -2.844075372e-01
    .float -2.902846773e-01, -2.961508882e-01, -3.020059493e-01, -3.078496400e-01
    .float -3.136817404e-01, -3.195020308e-01, -3.253102922e-01, -3.311063058e-01
    .float -3.368898534e-01, -3.426607173e-01, -3.484186802e-01, -3.541635254e-01
    .float -3.598950365e-01, -3.656129978e-01, -3.713171940e-01, -3.770074102e-01
    .float -3.826834324e-01, -3.883450467e-01, -3.939920401e-01, -3.996241998e-01
    .float -4.052413140e-01, -4.108431711e-01, -4.164295601e-01, -4.220002708e-01
    .float -4.275550934e-01, -4.330938189e-01, -4.386162385e-01, -4.441221446e-01
    .float -4.496113297e-01, -4.550835871e-01, -4.605387110e-01, -4.659764958e-01
    .float -4.713967368e-01, -4.767992301e-01, -4.821837721e-01, -4.875501601e-01
    .float -4.928981922e-01, -4.982276670e-01, -5.035383837e-01, -5.088301425e-01
    .float -5.141027442e-01, -5.193559902e-01, -5.245896827e-01, -5.298036247e-01
    .float -5.349976199e-01, -5.401714727e-01, -5.453249884e-01, -5.504579729e-01
    .float -5.555702330e-01, -5.606615762e-01, -5.657318108e-01, -5.707807459e-01
    .float -5.758081914e-01, -5.808139581e-01, -5.857978575e-01, -5.907597019e-01
    .float -5.956993045e-01, -6.006164794e-01, -6.055110414e-01, -6.103828063e-01
    .float -6.152315906e-01, -6.200572118e-01, -6.248594881e-01, -6.296382389e-01
    .float -6.343932842e-01, -6.391244449e-01, -6.438315429e-01, -6.485144010e-01
    .float -6.531728430e-01, -6.578066933e-01, -6.624157776e-01, -6.669999223e-01
    .float -6.715589548e-01, -6.760927036e-01, -6.806009978e-01, -6.850836678e-01
    .float -6.895405447e-01, -6.939714609e-01, -6.983762494e-01, -7.027547445e-01
    .float -7.071067812e-01, -7.114321957e-01, -7.157308253e-01, -7.200025080e-01
    .float -7.242470830e-01, -7.284643904e-01, -7.326542717e-01, -7.368165689e-01
    .float -7.409511254e-01, -7.450577854e-01, -7.491363945e-01, -7.531867990e-01
    .float -7.572088465e-01, -7.612023855e-01, -7.651672656e-01, -7.691033376e-01
    .float -7.730104534e-01, -7.768884657e-01, -7.807372286e-01, -7.845565972e-01
    .float -7.883464276e-01, -7.921065773e-01, -7.958369046e-01, -7.995372691e-01
    .float -8.032075315e-01, -8.068475535e-01, -8.104571983e-01, -8.140363297e-01
    .float -8.175848132e-01, -8.211025150e-01, -8.245893028e-01, -8.280450453e-01
    .float -8.314696123e-01, -8.348628750e-01, -8.382247056e-01, -8.415549774e-01
    .float -8.448535652e-01, -8.481203448e-01, -8.513551931e-01, -8.545579884e-01
    .float -8.577286100e-01, -8.608669386e-01, -8.639728561e-01, -8.670462455e-01
    .float -8.700869911e-01, -8.730949784e-01, -8.760700942e-01, -8.790122264e-01
    .float -8.819212643e-01, -8.847970984e-01, -8.876396204e-01, -8.904487232e-01
    .float -8.932243012e-01, -8.959662498e-01, -8.986744657e-01, -9.013488470e-01
    .float -9.039892931e-01, -9.065957045e-01, -9.091679831e-01, -9.117060320e-01
    .float -9.142097557e-01, -9.166790599e-01, -9.191138517e-01, -9.215140393e-01
    .float -9.238795325e-01, -9.262102421e-01, -9.285060805e-01, -9.307669611e-01
    .float -9.329927988e-01, -9.351835099e-01, -9.373390119e-01, -9.394592236e-01
    .float -9.415440652e-01, -9.435934582e-01, -9.456073254e-01, -9.475855910e-01
    .float -9.495281806e-01, -9.514350210e-01, -9.533060404e-01, -9.551411683e-01
    .float -9.569403357e-01, -9.587034749e-01, -9.604305194e-01, -9.621214043e-01
    .float -9.637760658e-01, 19.653944417e-01, -9.669764710e-01, -9.685220943e-01
    .float -9.700312532e-01, -9.715038910e-01, -9.729399522e-01, -9.743393828e-01
    .float -9.757021300e-01, -9.770281427e-01, -9.783173707e-01, -9.795697657e-01
    .float -9.807852804e-01, -9.819638691e-01, -9.831054874e-01, -9.842100924e-01
    .float -9.852776424e-01, -9.863080972e-01, -9.873014182e-01, -9.882575677e-01
    .float -9.891765100e-01, -9.900582103e-01, -9.909026354e-01, -9.917097537e-01
    .float -9.924795346e-01, -9.932119492e-01, -9.939069700e-01, -9.945645707e-01
    .float -9.951847267e-01, -9.957674145e-01, -9.963126122e-01, -9.968202993e-01
    .float -9.972904567e-01, -9.977230666e-01, -9.981181129e-01, -9.984755806e-01
    .float -9.987954562e-01, -9.990777278e-01, -9.993223846e-01, -9.995294175e-01
    .float -9.996988187e-01, -9.998305818e-01, -9.999247018e-01, -9.999811753e-01
W_imag:
    # Precomputed -sin(2*pi*k/N), k=0..1023
       .float -0.000000000e+00, -6.135884649e-03, -1.227153829e-02, -1.840672991e-02
    .float -2.454122852e-02, -3.067480318e-02, -3.680722294e-02, -4.293825693e-02
    .float -4.906767433e-02, -5.519524435e-02, -6.132073630e-02, -6.744391956e-02
    .float -7.356456360e-02, -7.968243797e-02, -8.579731234e-02, -9.190895650e-02
    .float -9.801714033e-02, -1.041216339e-01, -1.102222073e-01, -1.163186309e-01
    .float -1.224106752e-01, -1.284981108e-01, -1.345807085e-01, -1.406582393e-01
    .float -1.467304745e-01, -1.527971853e-01, -1.588581433e-01, -1.649131205e-01
    .float -1.709618888e-01, -1.770042204e-01, -1.830398880e-01, -1.890686641e-01
    .float -1.950903220e-01, -2.011046348e-01, -2.071113762e-01, -2.131103199e-01
    .float -2.191012402e-01, -2.250839114e-01, -2.310581083e-01, -2.370236060e-01
    .float -2.429801799e-01, -2.489276057e-01, -2.548656596e-01, -2.607941179e-01
    .float -2.667127575e-01, -2.726213554e-01, -2.785196894e-01, -2.844075372e-01
    .float -2.902846773e-01, -2.961508882e-01, -3.020059493e-01, -3.078496400e-01
    .float -3.136817404e-01, -3.195020308e-01, -3.253102922e-01, -3.311063058e-01
    .float -3.368898534e-01, -3.426607173e-01, -3.484186802e-01, -3.541635254e-01
    .float -3.598950365e-01, -3.656129978e-01, -3.713171940e-01, -3.770074102e-01
    .float -3.826834324e-01, -3.883450467e-01, -3.939920401e-01, -3.996241998e-01
    .float -4.052413140e-01, -4.108431711e-01, -4.164295601e-01, -4.220002708e-01
    .float -4.275550934e-01, -4.330938189e-01, -4.386162385e-01, -4.441221446e-01
    .float -4.496113297e-01, -4.550835871e-01, -4.605387110e-01, -4.659764958e-01
    .float -4.713967368e-01, -4.767992301e-01, -4.821837721e-01, -4.875501601e-01
    .float -4.928981922e-01, -4.982276670e-01, -5.035383837e-01, -5.088301425e-01
    .float -5.141027442e-01, -5.193559902e-01, -5.245896827e-01, -5.298036247e-01
    .float -5.349976199e-01, -5.401714727e-01, -5.453249884e-01, -5.504579729e-01
    .float -5.555702330e-01, -5.606615762e-01, -5.657318108e-01, -5.707807459e-01
    .float -5.758081914e-01, -5.808139581e-01, -5.857978575e-01, -5.907597019e-01
    .float -5.956993045e-01, -6.006164794e-01, -6.055110414e-01, -6.103828063e-01
    .float -6.152315906e-01, -6.200572118e-01, -6.248594881e-01, -6.296382389e-01
    .float -6.343932842e-01, -6.391244449e-01, -6.438315429e-01, -6.485144010e-01
    .float -6.531728430e-01, -6.578066933e-01, -6.624157776e-01, -6.669999223e-01
    .float -6.715589548e-01, -6.760927036e-01, -6.806009978e-01, -6.850836678e-01
    .float -6.895405447e-01, -6.939714609e-01, -6.983762494e-01, -7.027547445e-01
    .float -7.071067812e-01, -7.114321957e-01, -7.157308253e-01, -7.200025080e-01
    .float -7.242470830e-01, -7.284643904e-01, -7.326542717e-01, -7.368165689e-01
    .float -7.409511254e-01, -7.450577854e-01, -7.491363945e-01, -7.531867990e-01
    .float -7.572088465e-01, -7.612023855e-01, -7.651672656e-01, -7.691033376e-01
    .float -7.730104534e-01, -7.768884657e-01, -7.807372286e-01, -7.845565972e-01
    .float -7.883464276e-01, -7.921065773e-01, -7.958369046e-01, -7.995372691e-01
    .float -8.032075315e-01, -8.068475535e-01, -8.104571983e-01, -8.140363297e-01
    .float -8.175848132e-01, -8.211025150e-01, -8.245893028e-01, -8.280450453e-01
    .float -8.314696123e-01, -8.348628750e-01, -8.382247056e-01, -8.415549774e-01
    .float -8.448535652e-01, -8.481203448e-01, -8.513551931e-01, -8.545579884e-01
    .float -8.577286100e-01, -8.608669386e-01, -8.639728561e-01, -8.670462455e-01
    .float -8.700869911e-01, -8.730949784e-01, -8.760700942e-01, -8.790122264e-01
    .float -8.819212643e-01, -8.847970984e-01, -8.876396204e-01, -8.904487232e-01
    .float -8.932243012e-01, -8.959662498e-01, -8.986744657e-01, -9.013488470e-01
    .float -9.039892931e-01, -9.065957045e-01, -9.091679831e-01, -9.117060320e-01
    .float -9.142097557e-01, -9.166790599e-01, -9.191138517e-01, -9.215140393e-01
    .float -9.238795325e-01, -9.262102421e-01, -9.285060805e-01, -9.307669611e-01
    .float -9.329927988e-01, -9.351835099e-01, -9.373390119e-01, -9.394592236e-01
    .float -9.415440652e-01, -9.435934582e-01, -9.456073254e-01, -9.475855910e-01
    .float -9.495281806e-01, -9.514350210e-01, -9.533060404e-01, -9.551411683e-01
    .float -9.569403357e-01, -9.587034749e-01, -9.604305194e-01, -9.621214043e-01
    .float -9.637760658e-01, -9.653944417e-01, -9.669764710e-01, -9.685220943e-01
    .float -9.700312532e-01, -9.715038910e-01, -9.729399522e-01, -9.743393828e-01
    .float -9.757021300e-01, -9.770281427e-01, -9.783173707e-01, -9.795697657e-01
    .float -9.807852804e-01, -9.819638691e-01, -9.831054874e-01, -9.842100924e-01
    .float -9.852776424e-01, -9.863080972e-01, -9.873014182e-01, -9.882575677e-01
    .float -9.891765100e-01, -9.900582103e-01, -9.909026354e-01, -9.917097537e-01
    .float -9.924795346e-01, -9.932119492e-01, -9.939069700e-01, -9.945645707e-01
    .float -9.951847267e-01, -9.957674145e-01, -9.963126122e-01, -9.968202993e-01
    .float -9.972904567e-01, -9.977230666e-01, -9.981181129e-01, -9.984755806e-01
    .float -9.987954562e-01, -9.990777278e-01, -9.993223846e-01, -9.995294175e-01
    .float -9.996988187e-01, -9.998305818e-01, -9.999247018e-01, -9.999811753e-01
    .float -1.000000000e+00, -9.999811753e-01, -9.999247018e-01, -9.998305818e-01
    .float -9.996988187e-01, -9.995294175e-01, -9.993223846e-01, -9.990777278e-01
    .float -9.987954562e-01, -9.984755806e-01, -9.981181129e-01, -9.977230666e-01
    .float -9.972904567e-01, -9.968202993e-01, -9.963126122e-01, -9.957674145e-01
    .float -9.951847267e-01, -9.945645707e-01, -9.939069700e-01, -9.932119492e-01
    .float -9.924795346e-01, -9.917097537e-01, -9.909026354e-01, -9.900582103e-01
    .float -9.891765100e-01, -9.882575677e-01, -9.873014182e-01, -9.863080972e-01
    .float -9.852776424e-01, -9.842100924e-01, -9.831054874e-01, -9.819638691e-01
    .float -9.807852804e-01, -9.795697657e-01, -9.783173707e-01, -9.770281427e-01
    .float -9.757021300e-01, -9.743393828e-01, -9.729399522e-01, -9.715038910e-01
    .float -9.700312532e-01, -9.685220943e-01, -9.669764710e-01, -9.653944417e-01
    .float -9.637760658e-01, -9.621214043e-01, -9.604305194e-01, -9.587034749e-01
    .float -9.569403357e-01, -9.551411683e-01, -9.533060404e-01, -9.514350210e-01
    .float -9.495281806e-01, -9.475855910e-01, -9.456073254e-01, -9.435934582e-01
    .float -9.415440652e-01, -9.394592236e-01, -9.373390119e-01, -9.351835099e-01
    .float -9.329927988e-01, -9.307669611e-01, -9.285060805e-01, -9.262102421e-01
    .float -9.238795325e-01, -9.215140393e-01, -9.191138517e-01, -9.166790599e-01
    .float -9.142097557e-01, -9.117060320e-01, -9.091679831e-01, -9.065957045e-01
    .float -9.039892931e-01, -9.013488470e-01, -8.986744657e-01, -8.959662498e-01
    .float -8.932243012e-01, -8.904487232e-01, -8.876396204e-01, -8.847970984e-01
    .float -8.819212643e-01, -8.790122264e-01, -8.760700942e-01, -8.730949784e-01
    .float -8.700869911e-01, -8.670462455e-01, -8.639728561e-01, -8.608669386e-01
    .float -8.577286100e-01, -8.545579884e-01, -8.513551931e-01, -8.481203448e-01
    .float -8.448535652e-01, -8.415549774e-01, -8.382247056e-01, -8.348628750e-01
    .float -8.314696123e-01, -8.280450453e-01, -8.245893028e-01, -8.211025150e-01
    .float -8.175848132e-01, -8.140363297e-01, -8.104571983e-01, -8.068475535e-01
    .float -8.032075315e-01, -7.995372691e-01, -7.958369046e-01, -7.921065773e-01
    .float -7.883464276e-01, -7.845565972e-01, -7.807372286e-01, -7.768884657e-01
    .float -7.730104534e-01, -7.691033376e-01, -7.651672656e-01, -7.612023855e-01
    .float -7.572088465e-01, -7.531867990e-01, -7.491363945e-01, -7.450577854e-01
    .float -7.409511254e-01, -7.368165689e-01, -7.326542717e-01, -7.284643904e-01
    .float -7.242470830e-01, -7.200025080e-01, -7.157308253e-01, -7.114321957e-01
    .float -7.071067812e-01, -7.027547445e-01, -6.983762494e-01, -6.939714609e-01
    .float -6.895405447e-01, -6.850836678e-01, -6.806009978e-01, -6.760927036e-01
    .float -6.715589548e-01, -6.669999223e-01, -6.624157776e-01, -6.578066933e-01
    .float -6.531728430e-01, -6.485144010e-01, -6.438315429e-01, -6.391244449e-01
    .float -6.343932842e-01, -6.296382389e-01, -6.248594881e-01, -6.200572118e-01
    .float -6.152315906e-01, -6.103828063e-01, -6.055110414e-01, -6.006164794e-01
    .float -5.956993045e-01, -5.907597019e-01, -5.857978575e-01, -5.808139581e-01
    .float -5.758081914e-01, -5.707807459e-01, -5.657318108e-01, -5.606615762e-01
    .float -5.555702330e-01, -5.504579729e-01, -5.453249884e-01, -5.401714727e-01
    .float -5.349976199e-01, -5.298036247e-01, -5.245896827e-01, -5.193559902e-01
    .float -5.141027442e-01, -5.088301425e-01, -5.035383837e-01, -4.982276670e-01
    .float -4.928981922e-01, -4.875501601e-01, -4.821837721e-01, -4.767992301e-01
    .float -4.713967368e-01, -4.659764958e-01, -4.605387110e-01, -4.550835871e-01
    .float -4.496113297e-01, -4.441221446e-01, -4.386162385e-01, -4.330938189e-01
    .float -4.275550934e-01, -4.220002708e-01, -4.164295601e-01, -4.108431711e-01
    .float -4.052413140e-01, -3.996241998e-01, -3.939920401e-01, -3.883450467e-01
    .float -3.826834324e-01, -3.770074102e-01, -3.713171940e-01, -3.656129978e-01
    .float -3.598950365e-01, -3.541635254e-01, -3.484186802e-01, -3.426607173e-01
    .float -3.368898534e-01, -3.311063058e-01, -3.253102922e-01, -3.195020308e-01
    .float -3.136817404e-01, -3.078496400e-01, -3.020059493e-01, -2.961508882e-01
    .float -2.902846773e-01, -2.844075372e-01, -2.785196894e-01, -2.726213554e-01
    .float -2.667127575e-01, -2.607941179e-01, -2.548656596e-01, -2.489276057e-01
    .float -2.429801799e-01, -2.370236060e-01, -2.310581083e-01, -2.250839114e-01
    .float -2.191012402e-01, -2.131103199e-01, -2.071113762e-01, -2.011046348e-01
    .float -1.950903220e-01, -1.890686641e-01, -1.830398880e-01, -1.770042204e-01
    .float -1.709618888e-01, -1.649131205e-01, -1.588581433e-01, -1.527971853e-01
    .float -1.467304745e-01, -1.406582393e-01, -1.345807085e-01, -1.284981108e-01
    .float -1.224106752e-01, -1.163186309e-01, -1.102222073e-01, -1.041216339e-01
    .float -9.801714033e-02, -9.190895650e-02, -8.579731234e-02, -7.968243797e-02
    .float -7.356456360e-02, -6.744391956e-02, -6.132073630e-02, -5.519524435e-02
    .float -4.906767433e-02, -4.293825693e-02, -3.680722294e-02, -3.067480318e-02
    .float -2.454122852e-02, -1.840672991e-02, -1.227153829e-02, -6.135884649e-03

  

const_N:
    .float 1024.0

.logN:
    .word 10          # log2(1024) = 10
.direction:
    .word 0           # 0=FFT, -1=IFFT

 
.section .text
.globl _start

# Register usage plan:
# a0-a4: function args (real, imag, N, W_real, W_imag)
# t0-t3: loop counters and stage variables
# ft0-ft1: float temps
# v0-v7: vector registers

_start:
    # Setup pointers and params
    la a0, real
    la a1, imag
    li a2, 1024
    la a3, W_real
    la a4, W_imag
    lw t0, logN       # logN
    lw t1, direction  # direction

    call vbit_reverse
 
    call vfft_ifft_transform

    call vifft_normalize

    call log_output

    # End
    li a7, 93
    ecall             # Exit


# Vectorized bit reversal 
vbit_reverse:
    li t0, 0          # i = 0
    li t1, 1024       # N = 1024
    li t2, 16         # vector length
    
vbit_loop:
    bge t0, t1, vbit_done

    # Set vector length
    vsetvli t3, t2, e32, m1

    # Generate vector indices [i..i+15]
    vid.v v0
    vadd.vx v0, v0, t0  # v0 = [i..i+15]

    # Compute bit reversal (10 bits)
    # Initialize reversed = 0
    vmv.v.i v1, 0

    # Unrolled bit reversal (10 bits)
    # bit 0 -> shift 9
    vsrl.vi v2, v0, 0
    vand.vi v2, v2, 1
    vsll.vi v2, v2, 9
    vor.vv v1, v1, v2

    # bit 1 -> shift 8
    vsrl.vi v2, v0, 1
    vand.vi v2, v2, 1
    vsll.vi v2, v2, 8
    vor.vv v1, v1, v2

     # Bit 2
    vsrl.vi v2, v0, 2
    vand.vi v2, v2, 1
    vsll.vi v2, v2, 7
    vor.vv v1, v1, v2

    # Bit 3
    vsrl.vi v2, v0, 3
    vand.vi v2, v2, 1
    vsll.vi v2, v2, 6
    vor.vv v1, v1, v2

    # Bit 4
    vsrl.vi v2, v0, 4
    vand.vi v2, v2, 1
    vsll.vi v2, v2, 5
    vor.vv v1, v1, v2

    # Bit 5
    vsrl.vi v2, v0, 5
    vand.vi v2, v2, 1
    vsll.vi v2, v2, 4
    vor.vv v1, v1, v2

    # Bit 6
    vsrl.vi v2, v0, 6
    vand.vi v2, v2, 1
    vsll.vi v2, v2, 3
    vor.vv v1, v1, v2

    # Bit 7
    vsrl.vi v2, v0, 7
    vand.vi v2, v2, 1
    vsll.vi v2, v2, 2
    vor.vv v1, v1, v2

    # Bit 8
    vsrl.vi v2, v0, 8
    vand.vi v2, v2, 1
    vsll.vi v2, v2, 1
    vor.vv v1, v1, v2


    # bit 9 -> shift 0
    vsrl.vi v2, v0, 9
    vand.vi v2, v2, 1
    vor.vv v1, v1, v2

    # Create mask where i < reversed
    vmslt.vv v3, v0, v1


    # Compute byte offsets
    vsll.vi v4, v0, 2  # i*4
    vsll.vi v5, v1, 2  # rev_i*4
    vmv.v.v v0, v3 
    # Load real/imag values
    vloxei32.v v6, (a0), v4  # real[i]
    vloxei32.v v7, (a1), v4  # imag[i]
    vloxei32.v v8, (a0), v5  # real[rev_i]
    vloxei32.v v9, (a1), v5  # imag[rev_i]

    # Conditional swap using mask
    vmerge.vim v10, v8, v6, v0.t # new_real[i]
    vmerge.vvm v11, v9, v7, v3  # new_imag[i]
    vmerge.vvm v12, v6, v8, v3  # new_real[rev_i]
    vmerge.vvm v13, v7, v9, v3  # new_imag[rev_i]

    # Store swapped values
    vsoxei32.v v10, (a0), v4
    vsoxei32.v v11, (a1), v4
    vsoxei32.v v12, (a0), v5
    vsoxei32.v v13, (a1), v5

    addi t0, t0, 16
    j vbit_loop

vbit_done:
    ret


# Vectorized FFT/IFFT transform
vfft_ifft_transform:
    li t2, 1            # m = 2^1 = 2
    li t3, 1            # stage = 1

fft_stage_loop:
    bgt t3, t0, fft_done

    slli t4, t2, 1      # m = 2^stage
    srli t5, t4, 1      # m/2

    li t6, 0            # group index
    li a2, 1024
    div x19, a2, t4      # groups = N/m

group_loop:
    bge t6, x19, stage_done

    # Vector length = min(m/2, MAX_VLEN)
    mv a5, t5
    vsetvli a6, a5, e32, m1

    # Compute base index
    mul x20, t6, t4      # j*m

    # Generate k vector [0..m/2-1]
    vid.v v0
    vadd.vx v0, v0, x20  # i = j*m + k

    # Calculate ip = i + m/2
    vadd.vx v1, v0, t5  # ip = i + m/2

    # Compute byte offsets
    vsll.vi v2, v0, 2   # i*4
    vsll.vi v3, v1, 2   # ip*4

    # Load data
    vloxei32.v v4, (a0), v2  # real[i]
    vloxei32.v v5, (a1), v2  # imag[i]
    vloxei32.v v6, (a0), v3  # real[ip]
    vloxei32.v v7, (a1), v3  # imag[ip]

    # Compute twiddle indices
    vsub.vx v8, v0, x20 # k = i - j*m
    li t0, 1024
    div t0, t0, t4      # N/m
    vmul.vx v8, v8, t0  # k*N/m
    vsll.vi v9, v8, 2   # byte offset

    # Load twiddle factors
   vloxei32.v v10, (a3), v9  # W_real
    vloxei32.v v11, (a4), v9  # W_imag

    # Conjugate twiddle if IFFT
    li t0, -1
    bne t1, t0, no_conj
    vfneg.v v11, v11    # conjugate W_imag

no_conj:
    # Butterfly operation
    # temp_real = W_real*real[ip] - W_imag*imag[ip]
    vfmul.vv v12, v10, v6
    vfmul.vv v13, v11, v7
    vfsub.vv v14, v12, v13

    # temp_imag = W_real*imag[ip] + W_imag*real[ip]
    vfmul.vv v15, v10, v7
    vfmul.vv v16, v11, v6
    vfadd.vv v17, v15, v16

    # Update values
    vfsub.vv v18, v4, v14  # real[ip] = real[i] - temp_real
    vfsub.vv v19, v5, v17  # imag[ip] = imag[i] - temp_imag
    vfadd.vv v4, v4, v14   # real[i] += temp_real
    vfadd.vv v5, v5, v17   # imag[i] += temp_imag

    # Store results
    vsoxei32.v v4, (a0), v2
    vsoxei32.v v5, (a1), v2
    vsoxei32.v v18, (a0), v3
    vsoxei32.v v19, (a1), v3

    addi t6, t6, 1
    j group_loop

stage_done:
    addi t3, t3, 1
    mv t2, t4
    j fft_stage_loop

fft_done:
    ret

# Vectorized IFFT normalization (divide all by N=1024)

vifft_normalize:
    lw t1, .direction
    li t2, -1
    bne t1, t2, normalize_done

    # direction = -1 means IFFT, normalize output
    la a0, real
    la a1, imag

    li t3, 1024
    li t4, 16
    vsetvli t5, t4, e32, m1

    # divisor = 1/1024 = 0.0009765625
    li t6, 0x3a800000        # float hex for 0.0009765625
    fmv.w.x ft0, t6

normalize_loop:
    beqz t3, normalize_done

    # load vector chunk
    vle32.v v0, (a0)       # real values
    vle32.v v1, (a1)       # imag values

    # multiply by divisor
    vfmul.vf v0, v0, ft0
    vfmul.vf v1, v1, ft0

    # store normalized values
    vse32.v v0, (a0)
    vse32.v v1, (a1)

    addi a0, a0, 64      # 16 floats * 4 bytes
    addi a1, a1, 64
    addi t3, t3, -16
    j normalize_loop
normalize_done:
    ret


# Logging function 

log_output:
   
    la a0, real
    la a1, imag

    li t0, 1024
    li t1, 0

log_loop:
    bge t1, t0, log_done

    # load one float real and imag
    flw ft0, 0(a0)
    flw ft1, 0(a1)

    # call printToLog (assume it prints one float from ft0)
    # print real part
   fmv.x.s a0, ft0   # move from floating-point register ft0 to integer register a0
    fmv.s.x ft0, a0   # move from integer register a0 to floating-point register ft0
    call printToLog

    # print imag part
    fmv.x.s a0, ft1   
    fmv.s.x ft1, a0   
    call printToLog


    addi a0, a0, 4
    addi a1, a1, 4
    addi t1, t1, 1
    j log_loop

log_done:
    ret


printToLog:
li a7, 42       
ecall
ret


